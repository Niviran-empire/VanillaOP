namespace = paragon_2

# On destroying enemy ship.
country_event = {
	id = paragon_2.1005
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = fromfrom
		fromfrom = { exists = fleet.leader }
	}
	immediate = {
		FROMFROM = { # Winning ship.
			if = {
				limit = { exists = fleet.leader }
				fleet.leader = {

					# Scholar of War / Scholar of War II
					if = {
						limit = {
							OR = {
								has_trait = leader_trait_scholar_of_war
								has_trait = leader_trait_scholar_of_war_2
								has_trait = leader_trait_scholar_of_war_3
							}
						}
						if = {
							limit = { has_trait = leader_trait_scholar_of_war }
							add_experience = @trait_scholar_of_war_amt
						}
						else = {
							add_experience = @trait_scholar_of_war_2_amt
						}
					}

					# Corsair / Corsair II
					if = {
						limit = {
							OR = {
								has_trait = leader_trait_corsair
								has_trait = leader_trait_corsair_2
								has_trait = leader_trait_corsair_3
							}
							ROOT.FROM = { # Owner of losing ship.
								is_default_or_fallen = yes
							}
						}
						if = {
							limit = { has_trait = leader_trait_corsair }
							ROOT = { # Owner of winning ship.
								add_resource = {
									energy = @trait_corsair_amt
									mult = value:hells_heart_effect
								}
							}
						}
						else = {
							ROOT = { # Owner of winning ship.
								add_resource = {
									energy = @trait_corsair_2_amt
									mult = value:hells_heart_effect
								}
							}
						}
					}

					# Zealot / Zealot II
					if = {
						limit = {
							OR = {
								has_trait = leader_trait_par_zealot
								has_trait = leader_trait_par_zealot_2
								has_trait = leader_trait_par_zealot_3
							}
							ROOT.FROM = { # Owner of losing ship.
								is_default_or_fallen = yes
							}
						}
						
						ROOT = {
							if = {
								limit = { PREV = { has_trait = leader_trait_par_zealot } }
								add_resource = {
									unity = @trait_zealot_amt
									mult = value:calculate_ethics_divergence
								}
							}
							else = {
								add_resource = {
									unity = @trait_zealot_2_amt
									mult = value:calculate_ethics_divergence
								}
							}
							clear_variable = ethics_divergence_mult
						}
					}

					# Shipbreaker / Shipbreaker II
					if = {
						limit = {
							OR = {
								has_trait = leader_trait_shipbreaker
								has_trait = leader_trait_shipbreaker_2
								has_trait = leader_trait_shipbreaker_3
							}
							ROOT.FROM = { # Owner of losing fleet.
								is_default_or_fallen = yes
							}
						}
						if = {
							limit = { has_trait = leader_trait_shipbreaker }
							ROOT = {
								add_resource = { 
									alloys = @trait_shipbreaker_amt
									mult = value:hells_heart_effect
								}
							}
						}
						else = {
							ROOT = {
								add_resource = { 
									alloys = @trait_shipbreaker_2_amt
									mult = value:hells_heart_effect
								}
							}
						}
					}

					# Juryrigger / Juryrigger II
					if = {
						limit = {
							OR = {
								has_trait = leader_trait_juryrigger
								has_trait = leader_trait_juryrigger_2
								has_trait = leader_trait_juryrigger_3
							}
						}
						ROOT.FROMFROM = {
							if = {
								limit = { PREV = { has_trait = leader_trait_juryrigger } }
								repair_percentage = @trait_juryrigger_amt
							}
							else = {
								repair_percentage = @trait_juryrigger_2_amt
							}
						}
					}
				}
			}
		}
	}
}

ship_event = {
	id = paragon_2.2000
	hide_window = yes
	is_triggered_only = yes

	trigger = { OR = {
		str_paragon_2_1005_trigger_1 = yes
		str_paragon_2_1005_trigger_2 = yes
		str_paragon_2_1005_trigger_3 = yes
	} }

	immediate = {
		# We wait a day in order to check if any anomalies or dig sites have spawned.
		# Midas Touch trait
		ship_event = {
			id = paragon_2.2003
			scopes = {
				from = from
			}
			days = 1
		}
		# Observant traits
		ship_event = {
			id = paragon_2.2002
			scopes = {
				from = from
			}
			days = 1
		}
		# Prospector traits
		ship_event = {
			id = paragon_2.2001
			scopes = {
				from = from
			}
			days = 1
		}
	}
}