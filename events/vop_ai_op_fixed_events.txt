################################
#
# Origin Events
# Written and Modded by Eddy
#
###############################
namespace = vop_ai_fixed

event = {
	id = vop_ai_fixed.5
	hide_window = yes
	is_triggered_only = yes
	trigger = { count_playable_country = { count > 0 } }
	immediate = {
		set_update_modifiers_batch = begin
		# action.116
		if = {
			limit = {
				years_passed > 50
				has_global_flag = galactic_market_founded
				OR = {
					NOT = { is_on_market = volatile_motes }
					NOT = { is_on_market = exotic_gases }
					NOT = { is_on_market = rare_crystals }
					NOT = { is_on_market = sr_living_metal }
					NOT = { is_on_market = sr_zro }
					NOT = { is_on_market = sr_dark_matter }
				}
			}
			if = {
				limit = {
					NOT = { is_on_market = volatile_motes }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = volatile_motes value >= 1 }
					}
				}
				enable_on_market = volatile_motes
			}
			else_if = {
				limit = {
					NOT = { is_on_market = exotic_gases }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = exotic_gases value >= 1 }
					}
				}
				enable_on_market = exotic_gases
			}
			else_if = {
				limit = {
					NOT = { is_on_market = rare_crystals }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = rare_crystals value >= 1 }
					}
				}
				enable_on_market = rare_crystals
			}
			else_if = {
				limit = {
					NOT = { is_on_market = sr_living_metal }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = sr_living_metal value >= 1 }
					}
				}
				enable_on_market = sr_living_metal
			}
			else_if = {
				limit = {
					NOT = { is_on_market = sr_zro }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = sr_zro value >= 1 }
					}
				}
				enable_on_market = sr_zro
			}
			else_if = {
				limit = {
					NOT = { is_on_market = sr_dark_matter }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = sr_dark_matter value >= 1 }
					}
				}
				enable_on_market = sr_dark_matter
			}
		}
		every_system = {
			remove_star_flag = can_enable_can_be_system_blocks_sensors
			if = {
				limit = { OR = {
					##_|星云|	+RS/Sexp
					is_inside_nebula = yes
					has_modifier = space_storm
					##_|封印星系|	+Sexp
					has_star_flag = lcluster
					has_star_flag = sealed_system
				} }
				set_star_flag = can_enable_can_be_system_blocks_sensors
			}
		}
		# action 90
		if = {
			limit = { 
				any_playable_country = { any_owned_planet = {
					is_controlled_by = PREV
					solar_system = { NOT = { exists = starbase } }
				} }
				any_country = { is_nivirana_battle_country = yes }
			}
			every_system = {
				limit = {
					NOT = { exists = starbase }
					any_system_colony = {
						exists = owner
						has_ground_combat = no
						owner = { OR = {
							is_country_type = default
							is_country_type = fallen_empire
							is_country_type = awakened_fallen_empire
						} }
						solar_system = { NOR = {
							any_fleet_in_system = {
								exists = owner
								owner = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_hostile = prevprevprev.owner
										is_at_war_with = prevprevprev.owner
									}
								}
							}
							any_fleet_in_system = {
								exists = controller
								controller = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_hostile = prevprevprev.owner
										is_at_war_with = prevprevprev.owner
									}
								}
							}
							any_system_colony = {
								exists = owner
								NOT = { is_same_value = prevprev }
								owner = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_country_type = default
										is_country_type = fallen_empire
										is_country_type = awakened_fallen_empire
									}
								}
							}
						} }
					}
				}
				random_system_colony = {
					limit = {
						exists = owner
						has_ground_combat = no
						owner = { OR = {
							is_country_type = default
							is_country_type = fallen_empire
							is_country_type = awakened_fallen_empire
						} }
						solar_system = { NOR = {
							any_fleet_in_system = {
								exists = owner
								owner = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_hostile = prevprevprev.owner
										is_at_war_with = prevprevprev.owner
									}
								}
							}
							any_fleet_in_system = {
								exists = controller
								controller = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_hostile = prevprevprev.owner
										is_at_war_with = prevprevprev.owner
									}
								}
							}
							any_system_colony = {
								exists = owner
								owner = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_country_type = default
										is_country_type = fallen_empire
										is_country_type = awakened_fallen_empire
									}
								}
							}
						} }
					}
					planet_event = { id = action.91 }
				}
			}
		}
		# enclave 2065
		random_country = {
			limit = {
				is_country_type = enclave_mercenary
				any_owned_fleet = { is_leased = no }
			}
			country_event = { id = enclave.2070 }
		}
		# tech
		every_country = {
			# warcb
			remove_country_flag = VOP_cb_CNTR_has_stop_colossus_cb
			remove_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_1
			remove_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_2
			remove_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_3
			remove_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_4
			if = {
				limit = { any_controlled_fleet = {
					is_ship_class = shipclass_military_special
					any_controlled_ship = { is_ship_size = colossus }
				} }
				set_country_flag = VOP_cb_CNTR_has_stop_colossus_cb
			}
			if = {
				limit = { VOP_cb_CNTR_has_total_war_cb_SECTION_1 = yes }
				set_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_1
			}
			if = {
				limit = { VOP_cb_CNTR_has_total_war_cb_SECTION_2 = yes }
				set_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_2
			}
			if = {
				limit = { VOP_cb_CNTR_has_total_war_cb_SECTION_3 = yes }
				set_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_3
			}
			if = {
				limit = { VOP_cb_CNTR_has_total_war_cb_SECTION_4 = yes }
				set_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_4
			}
			if = {
				limit = { is_ai = yes }
				# MOD COMPATIBILITY
				if = {
					limit = { 
						has_technology = tech_ascension_theory 
						has_global_flag = tidy_tradition_active 
					}
					if = {
						limit = { NOT = { is_variable_set = TT_var_ascension_breakthrough_times } }
						set_variable = { which = TT_var_ascension_breakthrough_times value = 1 }
					}
					else_if = {
						limit = {
							is_variable_set = TT_var_ascension_breakthrough_times
							resource_stockpile_compare = {
								resource = unity
								value >= 25000
								mult = TT_var_ascension_breakthrough_times
							}
						}
						add_resource = {
							unity = -5000
							mult = TT_var_ascension_breakthrough_times
						}
						remove_modifier = TT_mod_ascension_breakthrough
						remove_modifier = TT_mod_ascension_breakthrough_EACI
						if = {#原版加凝聚力
							limit = { NOT = { has_global_flag = cultural_overhaul_active } }
							add_modifier = {
								modifier = TT_mod_ascension_breakthrough
								multiplier = TT_var_ascension_breakthrough_times
								days = -1
							}
						}
						else_if = {#无限思潮mod加行政管理
							limit = { has_global_flag = cultural_overhaul_active }
							add_modifier = {
								modifier = TT_mod_ascension_breakthrough_EACI
								multiplier = TT_var_ascension_breakthrough_times
								days = -1
							}
						}
						change_variable = { which = TT_var_ascension_breakthrough_times value = 1 }
					}
				}
				if = {
					limit = { OR = {
						is_country_type = default
						is_country_type = enclave_mercenary
					} }
					country_event = { id = vop_ai_fixed.9 days = 1 }
				}
				if = {
					limit = { OR = { 
						NOT = { has_ethic = ethic_gestalt_consciousness }
						is_active_resolution = resolution_galacticstudies_extradimensional_experimentation
						has_relic = r_zro_crystal
					} }
					remove_country_flag = pop_has_trait_psionic
					remove_country_flag = pop_has_trait_latent_psionic
					if = {
						limit = { any_owned_pop = {
							pop_has_trait = trait_psionic
						} }
						set_country_flag = pop_has_trait_psionic
					}
					if = {
						limit = { any_owned_pop = {
							pop_has_trait = trait_latent_psionic
						} }
						set_country_flag = pop_has_trait_latent_psionic
					}
				}
				if = {
					limit = { is_regular_empire = yes }
					remove_country_flag = is_enslaved_var_more_than_9
					remove_country_flag = is_enslaved_var_more_than_19
					remove_country_flag = is_enslaved_var_more_than_29
					remove_country_flag = is_enslaved_var_more_than_initial
					if = {
						limit = { count_owned_pop = {
							limit = { is_enslaved = yes }
							count > 29
						} }
						set_country_flag = is_enslaved_var_more_than_29
						set_country_flag = is_enslaved_var_more_than_19
						set_country_flag = is_enslaved_var_more_than_9
					}
					else_if = {
						limit = { count_owned_pop = {
							limit = { is_enslaved = yes }
							count > 19
						} }
						set_country_flag = is_enslaved_var_more_than_19
						set_country_flag = is_enslaved_var_more_than_9
					}
					else_if = {
						limit = { count_owned_pop = {
							limit = { is_enslaved = yes }
							count > 9
						} }
						set_country_flag = is_enslaved_var_more_than_9
					}
					if = {
						limit = { OR = {
							allows_slavery = no
							NOT = { any_owned_pop = { is_enslaved = yes } }
						} }
						set_country_flag = is_enslaved_var_more_than_initial
					}
				}
			}
		}
		# planet events
		every_galaxy_planet = {
			limit = { exists = owner }
			planet_event = { id = crime.41 days = 1 }
			planet_event = { id = vop_ai_fixed.7 days = 1 }
			if = {
				limit = { owner = { is_ai = yes } }
				planet_event = { id = vop_ai_fixed.10 days = 1 }
			}
		}
		# pop events
		every_galaxy_pop = {
			species = {
				remove_species_flag = can_enable_species_has_happiness
				remove_species_flag = can_enable_should_force_decline_species
				remove_species_flag = can_enable_species_can_live_on_planet
				remove_species_flag = can_has_food_upkeep
			}
			remove_pop_flag = enable_purge_pop_assign_to_pop
			remove_pop_flag = enable_robot_servant_pop_assign_to_pop
			remove_pop_flag = enable_precursor_pop_assign_to_pop
			remove_pop_flag = enable_work_pop_assign_to_pop
			remove_pop_flag = enable_simple_drone_assign_to_pop
			remove_pop_flag = enable_should_apply_unemployment_penalties_op
			remove_pop_flag = enable_pop_election_vote
			remove_pop_flag = enable_pop_has_random_ethics
			remove_pop_flag = can_enable_can_generate_military_leader_from_pop
			remove_pop_flag = can_enable_can_generate_leader_from_pop
			remove_pop_flag = enable_canbe_enforcer_jobs_pop
			remove_pop_flag = enable_canbe_entertainer_jobs_pop
			remove_pop_flag = enable_canbe_fe_xeno_ward_jobs_pop
			remove_pop_flag = enable_canbe_fe_hedonist_jobs_pop
			species = { 
				if = {
					limit = { can_have_food_upkeep_species = yes }
					set_species_flag = can_has_food_upkeep
				} 
				#happiniess species
				if = {
					limit = { NOR = {
						has_trait = trait_machine_unit
						has_trait = trait_hive_mind
						can_think = no
						AND = {
							has_trait = trait_mechanical
							OR = {
								NOT = { exists = owner }
								owner = { has_authority = auth_machine_intelligence }
								owner = { NOT = { has_technology = tech_synthetic_workers } }
								owner = { has_policy_flag = ai_outlawed }
							}
						}
						AND = {
							has_trait = trait_cybernetic
							exists = owner
							owner = {
								has_authority = auth_machine_intelligence
								has_civic = civic_machine_assimilator # Assimilator empire
							}
						}
					} }
					set_species_flag = can_enable_species_has_happiness
				}
				# should_force_decline_species
				if = {
					limit = {
						OR = {
							has_trait = trait_clone_soldier_infertile
							has_trait = trait_clone_soldier_infertile_full_potential
						}
						prev.planet = {
							OR = {
								# Check if country is unable to build Vats for this species.
								AND = {
									exists = owner
									owner = {
										OR = {
											NOT = { has_origin = origin_clone_army }					# Can't have Vats.
											has_country_flag = clone_army_fertility_unlocked			# Can't have Vats anymore.
											NOT = { owner_main_species = { is_same_species = prevprevprev } }	# Our Vats can't build this species.
										}
									}
								}
								# Vats check out, but are there more pops than Vats support?
								check_variable = { which = clone_pops_missing value < 0 }
							}
						}
					}
					set_species_flag = can_enable_should_force_decline_species
				}
				# species_can_live_on_planet
				if = {
					limit = { 
						exists = prev.planet #somehow this appeared in the error log. No idea how!
						if = {
							limit = { prev.planet = { is_planet_class = pc_machine } }
							OR = {
								has_trait = trait_machine_unit
								has_trait = trait_mechanical
								AND = {
									has_trait = trait_cybernetic
									exists = owner
									owner = {
										has_authority = auth_machine_intelligence
										has_civic = civic_machine_assimilator # Assimilator empire
									}
								}
							}
						}
						if = {
							limit = { prev.planet = { is_planet_class = pc_hive } }
							OR = {
								has_trait = trait_hive_mind
								AND = { #Necrophage Hive Mind can have Necrophytes
									exists = owner
									owner = {
										is_hive_empire = yes
										has_origin = origin_necrophage
										prev = { species_can_be_necrophaged = yes }
									}
								}
							}
						}
					}
					set_species_flag = can_enable_species_can_live_on_planet
				}
			}
			if = {
				limit = { exists = owner }
				remove_pop_flag = trade_value_add_op_1
				remove_pop_flag = trade_value_add_op_2
				remove_pop_flag = trade_value_add_op_3
				remove_pop_flag = trade_value_add_op_4
				remove_pop_flag = trade_value_add_op_5
				remove_pop_flag = trade_value_add_op_6
				remove_pop_flag = trade_value_add_op_7
				remove_pop_flag = trade_value_add_op_8
				remove_pop_flag = trade_value_add_op_9
				remove_pop_flag = trade_value_add_op_10
				remove_pop_flag = trade_value_add_op_11
				remove_pop_flag = trade_value_add_op_12
				remove_pop_flag = trade_value_add_op_13
				remove_pop_flag = trade_value_add_op_14
				remove_pop_flag = clerk_has_planet_amenities_add
				remove_pop_flag = clerk_has_planet_amenities_add_ring_trade_hub
				remove_pop_flag = VOP_livestanderd_POP_exotic_metabolism_op_1
				remove_pop_flag = VOP_livestanderd_POP_has_food_upkeep_op_1
				remove_pop_flag = VOP_livestanderd_POP_has_food_upkeep_op_2
				remove_pop_flag = VOP_livestanderd_POP_has_minerals_upkeep_op_1
				remove_pop_flag = VOP_livestanderd_POP_has_minerals_upkeep_op_2
				remove_pop_flag = VOP_livestanderd_POP_has_phototrophic_energy_upkeep_op
				remove_pop_flag = VOP_livestanderd_POP_has_energy_upkeep_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_efficient_processors_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_logic_engines_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_loyalty_circuits_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_double_jointed_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_enhanced_memory_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_durable_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_learning_algorithms_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_trading_algorithms_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_streamlined_protocols_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_consumer_goods_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_alloys_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_unity_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_gas_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_crystal_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_motes_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_zro_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_dark_matter_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_living_metal_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_nanites_op
				remove_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_1
				remove_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_2
				remove_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_3
				remove_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_4
				remove_pop_flag = VOP_livestanderd_POP_living_standard_normal_1
				remove_pop_flag = VOP_livestanderd_POP_living_standard_normal_2
				owner = { remove_country_flag = enable_allows_alien_leaders }
				#speceis_right
				if = {
					limit = { 
						NAND = {
							exists = owner
							owner = { has_deficit = consumer_goods }
						}
					}
					set_pop_flag = VOP_livestanderd_POP_living_standard_normal_1
				}
				if = {
					limit = { 
						is_unemployed = yes
					}
					set_pop_flag = VOP_livestanderd_POP_living_standard_normal_2
				}
				#Pop faction
				if = {
					limit = { owner = { count_pop_faction = { count > 0 } } }
					if = {
						limit = {
							OR = {
								has_ethic = ethic_materialist
								is_robot_pop = yes
							}
							is_shackled_robot = no
							can_think = yes
							NOT = { has_ethic = ethic_spiritualist }
							NOT = { has_pop_flag = can_join_faction_op_1 }
							owner = { any_pop_faction = { is_pop_faction_type = technologist } }
						}
						set_pop_flag = can_join_faction_op_1
					}
					if = {
						limit = { 
							is_shackled_robot = no
							can_think = yes
							OR = {
								NOT = { is_same_species = owner_species }
								owner = {
									OR = {
										has_ethic = ethic_pacifist
										has_ethic = ethic_fanatic_pacifist
									}
								}
							}
							NOT = { has_pop_flag = can_join_faction_op_2 }
							owner = { any_pop_faction = { is_pop_faction_type = isolationist } }
						}
						set_pop_flag = can_join_faction_op_2
					}
					if = {
						limit = { 
							OR = {
								has_ethic = ethic_egalitarian
								has_ethic = ethic_xenophile
								has_ethic = ethic_pacifist
							}
							is_shackled_robot = no
							can_think = yes
							NOT = { has_pop_flag = manifesti_bored }
							NOT = { has_pop_flag = can_join_faction_op_3 }
							owner = { any_pop_faction = { is_pop_faction_type = manifesti } }
						}
						set_pop_flag = can_join_faction_op_3
					}
					if = {
						limit = { 
							is_shackled_robot = no
							can_think = yes
							owner = {
								NOR = {
									has_ethic = ethic_pacifist
									has_ethic = ethic_fanatic_pacifist
								}
							}
							is_same_species = owner_species
							NOT = { has_pop_flag = can_join_faction_op_4 }
							owner = { any_pop_faction = { is_pop_faction_type = supremacist } }
						}
						set_pop_flag = can_join_faction_op_4
					}
					if = {
						limit = { 
							is_shackled_robot = no
							can_think = yes
							NOT = { has_pop_flag = can_join_faction_op_5 }
							owner = { any_pop_faction = { OR = {
								is_pop_faction_type = xenoist
								is_pop_faction_type = imperialist
								is_pop_faction_type = progressive
								is_pop_faction_type = prosperity
							} } }
						}
						set_pop_flag = can_join_faction_op_5
					}
					if = {
						limit = { 
							is_enslaved = no
							is_shackled_robot = no
							is_being_purged = no
							can_think = yes
							NOT = { has_pop_flag = can_join_faction_op_6 }
							owner = { any_pop_faction = { is_pop_faction_type = traditionalist } }
						}
						set_pop_flag = can_join_faction_op_6
					}
					if = {
						limit = { 
							can_think = yes
							NOT = { has_pop_flag = can_join_faction_op_7 }
							owner = { any_pop_faction = { is_pop_faction_type = totalitarian } }
						}
						set_pop_flag = can_join_faction_op_7
					}
				}
				#Pop category
				#resource
				if = {
					limit = { 
						is_organic_species = yes
						has_trait = trait_exotic_metabolism
					}
					set_pop_flag = VOP_livestanderd_POP_exotic_metabolism_op_1
				}
				if = {
					limit = { 
						has_food_upkeep = yes
						is_phototrophic = no
					}
					set_pop_flag = VOP_livestanderd_POP_has_food_upkeep_op_1
				}
				if = {
					limit = { 
						has_food_upkeep = yes
						is_phototrophic = yes
					}
					set_pop_flag = VOP_livestanderd_POP_has_food_upkeep_op_2
				}
				if = {
					limit = { 
						has_mineral_upkeep = yes
						is_phototrophic = no
					}
					set_pop_flag = VOP_livestanderd_POP_has_minerals_upkeep_op_1
				}
				if = {
					limit = { 
						has_mineral_upkeep = yes
						is_phototrophic = yes
					}
					set_pop_flag = VOP_livestanderd_POP_has_minerals_upkeep_op_2
				}
				if = {
					limit = { 
						has_phototrophic_energy_upkeep = yes
					}
					set_pop_flag = VOP_livestanderd_POP_has_phototrophic_energy_upkeep_op
				}
				if = {
					limit = { 
						has_energy_upkeep = yes
					}
					set_pop_flag = VOP_livestanderd_POP_has_energy_upkeep_op
				}
				if = {
					limit = { 
						has_trait = trait_cyborg_efficient_processors
					}
					set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_efficient_processors_op
				}
				if = {
					limit = { 
						has_trait = trait_cyborg_logic_engines
					}
					set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_logic_engines_op
				}
				if = {
					limit = { 
						has_trait = trait_cyborg_loyalty_circuits
					}
					set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_loyalty_circuits_op
				}
				if = {
					limit = { 
						has_trait = trait_cyborg_double_jointed
					}
					set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_double_jointed_op
				}
				if = {
					limit = { 
						has_trait = trait_cyborg_enhanced_memory
					}
					set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_enhanced_memory_op
				}
				if = {
					limit = { 
						has_trait = trait_cyborg_durable
					}
					set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_durable_op
				}
				if = {
					limit = { 
						has_trait = trait_cyborg_learning_algorithms
					}
					set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_learning_algorithms_op
				}
				if = {
					limit = { 
						has_trait = trait_cyborg_trading_algorithms
					}
					set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_trading_algorithms_op
				}
				if = {
					limit = { 
						has_trait = trait_cyborg_streamlined_protocols
					}
					set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_streamlined_protocols_op
				}
				if = {
					limit = { 
						has_trait = trait_psionic
						owner = {
							has_country_flag = instrument_craving_consumer_goods
						}
					}
					set_pop_flag = VOP_livestanderd_POP_instrument_craving_consumer_goods_op
				}
				if = {
					limit = { 
						has_trait = trait_psionic
						owner = {
							has_country_flag = instrument_craving_alloys
						}
					}
					set_pop_flag = VOP_livestanderd_POP_instrument_craving_alloys_op
				}
				if = {
					limit = { 
						has_trait = trait_psionic
						owner = {
							has_country_flag = instrument_craving_unity
						}
					}
					set_pop_flag = VOP_livestanderd_POP_instrument_craving_unity_op
				}
				if = {
					limit = { 
						has_trait = trait_psionic
						owner = {
							has_country_flag = instrument_craving_gas
						}
					}
					set_pop_flag = VOP_livestanderd_POP_instrument_craving_gas_op
				}
				if = {
					limit = { 
						has_trait = trait_psionic
						owner = {
							has_country_flag = instrument_craving_crystal
						}
					}
					set_pop_flag = VOP_livestanderd_POP_instrument_craving_crystal_op
				}
				if = {
					limit = { 
						has_trait = trait_psionic
						owner = {
							has_country_flag = instrument_craving_motes
						}
					}
					set_pop_flag = VOP_livestanderd_POP_instrument_craving_motes_op
				}
				if = {
					limit = { 
						has_trait = trait_psionic
						owner = {
							has_country_flag = instrument_craving_zro
						}
					}
					set_pop_flag = VOP_livestanderd_POP_instrument_craving_zro_op
				}
				if = {
					limit = { 
						has_trait = trait_psionic
						owner = {
							has_country_flag = instrument_craving_dark_matter
						}
					}
					set_pop_flag = VOP_livestanderd_POP_instrument_craving_dark_matter_op
				}
				if = {
					limit = { 
						has_trait = trait_psionic
						owner = {
							has_country_flag = instrument_craving_living_metal
						}
					}
					set_pop_flag = VOP_livestanderd_POP_instrument_craving_living_metal_op
				}
				if = {
					limit = { 
						has_trait = trait_psionic
						owner = {
							has_country_flag = instrument_craving_nanites
						}
					}
					set_pop_flag = VOP_livestanderd_POP_instrument_craving_nanites_op
				}
				if = {
					limit = { 
						OR = {
							has_trait = trait_lithoid_scintillating
							has_trait = trait_advanced_scintillating
						}
					}
					set_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_1
				}
				if = {
					limit = { 
						OR = {
							has_trait = trait_lithoid_gaseous_byproducts
							has_trait = trait_advanced_gaseous_byproducts
						}
					}
					set_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_2
				}
				if = {
					limit = { 
						OR = {
							has_trait = trait_lithoid_volatile_excretions
							has_trait = trait_advanced_volatile_excretions
						}
					}
					set_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_3
				}
				if = {
					limit = { 
						OR = {
							has_trait = trait_notofthisworld
							has_trait = trait_robot_notofthisworld
						}
					}
					set_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_4
				}
				#trade
				if = {
					limit = { is_gestalt = no }
					if = {
						limit = { 
							can_generate_trade_value = yes
							prosperity_gospel_check_trigger = yes
						}
						set_pop_flag = trade_value_add_op_1
					}
					if = {
						limit = { 
							can_generate_trade_value = yes
							has_shared_burden_living_standard_type = yes
						}
						set_pop_flag = trade_value_add_op_2
					}
					if = {
						limit = { 
							can_generate_trade_value = yes
							OR = {
								has_academic_living_standard_type = yes
								has_very_high_living_standard_type = yes
								has_decadent_living_standard_type = yes
							}
						}
						set_pop_flag = trade_value_add_op_3
					}
					if = {
						limit = { 
							can_generate_trade_value = yes
							OR = {
								has_high_living_standard_type = yes
								has_normal_living_standard_type = yes
								has_stratified_living_standard_type = yes
							}
						}
						set_pop_flag = trade_value_add_op_4
					}
					if = {
						limit = { 
							can_generate_trade_value = yes
							has_low_living_standard_type = yes
						}
						set_pop_flag = trade_value_add_op_5
					}
					if = {
						limit = { 
							can_assemble_budding_pop = yes
						}
						set_pop_flag = trade_value_add_op_6
					}
					if = {
						limit = { 
							NOT = { has_trait = trait_noxious }
						}
						set_pop_flag = trade_value_add_op_7
					}
					if = {
						limit = { has_trait = trait_noxious }
						set_pop_flag = trade_value_add_op_8
					}
					if = {
						limit = { 
							can_generate_trade_value = yes
							OR = {
								has_decadent_living_standard_type = yes
								has_very_high_living_standard_type = yes
							}
						}
						set_pop_flag = trade_value_add_op_9
					}
					if = {
						limit = { 
							can_generate_trade_value = yes
							has_high_living_standard_type = yes
						}
						set_pop_flag = trade_value_add_op_10
					}
					if = {
						limit = { 
							can_generate_trade_value = yes
							OR = {
								has_normal_living_standard_type = yes
								has_academic_living_standard_type = yes
							}
						}
						set_pop_flag = trade_value_add_op_11
					}
					if = {
						limit = { 
							can_generate_trade_value = yes
							has_stratified_living_standard_type = yes
						}
						set_pop_flag = trade_value_add_op_12
					}
					if = {
						limit = { 
							can_generate_trade_value = yes
							OR = {
								has_academic_living_standard_type = yes
								has_very_high_living_standard_type = yes
								has_high_living_standard_type = yes
								has_normal_living_standard_type = yes
								has_stratified_living_standard_type = yes
								has_decadent_living_standard_type = yes
							}
						}
						set_pop_flag = trade_value_add_op_13
					}
					if = {
						limit = { can_assemble_tiyanki_pop = yes }
						set_pop_flag = trade_value_add_op_14
					}
				}
				#pop jobs
				if = {
					limit = { has_job = clerk }
					set_pop_flag = clerk_has_planet_amenities_add
					if = {
						limit = { planet = {
							exists = orbital_defence
							orbital_defence = {
								exists = starbase
								starbase = { has_starbase_building = ring_trade_hub }
							}
						} }
						set_pop_flag = clerk_has_planet_amenities_add_ring_trade_hub
					}
				}
				if = {
					limit = {
						NOT = { is_same_species = owner }
						has_citizenship_rights = yes
					}
					owner = { set_country_flag = enable_allows_alien_leaders }
				}
				if = {
					limit = { battle_thrall_job_check_trigger = yes }
					set_pop_flag = enable_canbe_enforcer_jobs_pop
				}
				if = {
					limit = { entertainer_job_check_trigger = yes }
					set_pop_flag = enable_canbe_entertainer_jobs_pop
				}
				if = {
					limit = { 
						owner = {
							is_fallen_empire = yes
							is_xenophile = yes
						}
						NOT = { is_same_species = owner }
						is_robot_pop = no
						planet = { has_building = building_fe_xeno_zoo }
					}
					set_pop_flag = enable_canbe_fe_xeno_ward_jobs_pop
				}
				if = {
					limit = { 
						owner = {
							is_fallen_empire = yes
							is_fallen_empire_spiritualist = no
							is_fallen_machine_empire = no
						}
						is_same_species = owner
						NOR = {
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
					set_pop_flag = enable_canbe_fe_hedonist_jobs_pop
				}
			}
			#pop should_apply_unemployment_penalties
			if = {
				limit = { 
					NOR = {
						has_very_high_living_standard_type = yes
						has_high_living_standard_type = yes
						has_shared_burden_living_standard_type = yes
					}
				}
				set_pop_flag = enable_should_apply_unemployment_penalties_op
			}
			#pop assign_to_pop
			if = {
				limit = { OR = {
					is_being_purged = yes
					has_pop_flag = event_purge
					AND = { # controlled by crisis
						exists = planet
						planet = {
							exists = controller
							controller = {
								OR = {
									is_country_type = ai_empire
									is_country_type = swarm
								}
							}
						}
						OR = { # contingency won't purge itself
							NOT = { exists = event_target:custodian_bot }
							AND = {
								exists = event_target:custodian_bot
								NOT = { species = { is_same_value = event_target:custodian_bot } }
							}
						}
					}
				} }
				set_pop_flag = enable_purge_pop_assign_to_pop
			}
			if = {
				limit = { 
					exists = owner
					owner = {
						OR = {
							is_country_type = fallen_empire
							is_country_type = awakened_fallen_empire
						}
					}
					OR = {
						is_same_species = owner
						owner = {
							is_fallen_empire_spiritualist = yes
						}
					}
				}
				set_pop_flag = enable_precursor_pop_assign_to_pop
			}
			if = {
				limit = { 
					NAND = {
						exists = planet
						planet = {
							exists = owner
							owner = { is_gestalt = yes }
						}
					}
					OR = {
						is_shackled_robot = yes
						is_non_sapient_robot = yes
					}
				}
				set_pop_flag = enable_robot_servant_pop_assign_to_pop
			}
			if = {
				limit = { 
					exists = owner
					owner = { is_gestalt = no }
				}
				set_pop_flag = enable_work_pop_assign_to_pop
			}
			if = {
				limit = { 
					exists = owner
					owner = { is_gestalt = yes }
				}
				set_pop_flag = enable_simple_drone_assign_to_pop
			}
			#Criminel(always = no)
			# remove_pop_flag = enable_generate_crimel_rule
			#canpopvote
			if = {
				limit = { 
					has_citizenship_rights = yes
					is_sapient = yes
					is_enslaved = no
					is_being_purged = no
				}
				set_pop_flag = enable_pop_election_vote
			}
			if = {
				limit = { NOT = { has_citizenship_type = { country = owner type = citizenship_organic_trophy } } }
				set_pop_flag = enable_pop_has_random_ethics
			}
			# can_generate_military_leader_from_pop
			if = {
				limit = {  
					can_be_military_leader = yes
					OR = {
						is_robot_pop = no
						AND = {
							exists = owner
							owner = {
								OR = {
									has_technology = tech_synthetic_leaders
									has_authority = auth_machine_intelligence
									is_mechanical_empire = yes
								}
							}
						}
					}
					OR = {
						is_same_species = owner
						owner = {
							NAND = {
								has_origin = origin_necrophage
								has_trait = trait_necrophage
							}
						}
					}
				}
				set_pop_flag = can_enable_can_generate_military_leader_from_pop
			}
			if = {
				limit = { 
					has_citizenship_rights = yes
					NOT = { has_trait = trait_syncretic_proles }
					can_think = yes
					OR = {
						is_robot_pop = no
						owner = {
							OR = {
								has_technology = tech_synthetic_leaders
								has_authority = auth_machine_intelligence
								is_mechanical_empire = yes
							}
						}
					}
					OR = {
						is_same_species = owner
						owner = {
							NAND = {
								has_origin = origin_necrophage
								has_trait = trait_necrophage
							}
						}
					}
				}
				set_pop_flag = can_enable_can_generate_leader_from_pop
			}
		}
		set_update_modifiers_batch = end
	}
}

planet_event = {
	id = vop_ai_fixed.7
	hide_window = yes
	is_triggered_only = yes
	pre_triggers = { has_owner = yes }
	trigger = { 
		num_pops > 0
		owner = { is_gestalt = no } 
	}
	immediate = {
		set_update_modifiers_batch = begin
		remove_modifier = str_trade_pop
		remove_modifier = str_assemble_pop
		remove_modifier = str_assemble_tiyanki_pop
		#remove_modifier = str_pop_non_noxious_happiness_pop
		remove_modifier = str_pop_planet_amenities_add
		clear_variable = trade_value_add_op_1_var
		clear_variable = trade_value_add_op_2_var
		clear_variable = trade_value_add_op_3_var
		clear_variable = trade_value_add_op_4_var
		clear_variable = trade_value_add_op_5_var
		clear_variable = trade_value_add_op_6_var
		clear_variable = trade_value_add_op_8_var
		clear_variable = trade_value_add_op_9_var
		clear_variable = trade_value_add_op_10_var
		clear_variable = trade_value_add_op_11_var
		clear_variable = trade_value_add_op_12_var
		clear_variable = trade_value_add_op_13_var
		clear_variable = trade_value_add_op_14_var
		clear_variable = clerk_has_planet_amenities_add_var
		clear_variable = clerk_has_planet_amenities_add_ring_trade_hub_var
		clear_variable = trade_value_add_op_total
		clear_variable = asseble_value_add_op_total
		#clear_variable = noxious_happiness_penalty_value_add_op_total
		clear_variable = planet_amenities_add_total
		planet_event = { id = vop_ai_fixed.8 days = 1 }
		set_update_modifiers_batch = end
	}
}

@noxious_happiness_penalty = -0.01
planet_event = {
	id = vop_ai_fixed.8
	hide_window = yes
	is_triggered_only = yes
	pre_triggers = { has_owner = yes }
	trigger = { any_owned_pop = { OR = {
		has_pop_flag = trade_value_add_op_1
		has_pop_flag = trade_value_add_op_2
		has_pop_flag = trade_value_add_op_3
		has_pop_flag = trade_value_add_op_4
		has_pop_flag = trade_value_add_op_5
		has_pop_flag = trade_value_add_op_6
		has_pop_flag = trade_value_add_op_8
		has_pop_flag = trade_value_add_op_9
		has_pop_flag = trade_value_add_op_10
		has_pop_flag = trade_value_add_op_11
		has_pop_flag = trade_value_add_op_12
		has_pop_flag = trade_value_add_op_13
		has_pop_flag = trade_value_add_op_14
		has_pop_flag = clerk_has_planet_amenities_add_ring_trade_hub
		has_pop_flag = clerk_has_planet_amenities_add
	} } }
	immediate = {
		set_update_modifiers_batch = begin
		every_owned_pop = {
			limit = { OR = {
				has_pop_flag = trade_value_add_op_1
				has_pop_flag = trade_value_add_op_2
				has_pop_flag = trade_value_add_op_3
				has_pop_flag = trade_value_add_op_4
				has_pop_flag = trade_value_add_op_5
				has_pop_flag = trade_value_add_op_6
				has_pop_flag = trade_value_add_op_8
				has_pop_flag = trade_value_add_op_9
				has_pop_flag = trade_value_add_op_10
				has_pop_flag = trade_value_add_op_11
				has_pop_flag = trade_value_add_op_12
				has_pop_flag = trade_value_add_op_13
				has_pop_flag = trade_value_add_op_14
				has_pop_flag = clerk_has_planet_amenities_add_ring_trade_hub
				has_pop_flag = clerk_has_planet_amenities_add
			} }
			if = {
				limit = { has_pop_flag = trade_value_add_op_1 }
				root = { change_variable = { which = trade_value_add_op_1_var value = @trade_value_prosperity_gospel } }
			}
			if = {
				limit = { has_pop_flag = trade_value_add_op_2 }
				root = { change_variable = { which = trade_value_add_op_2_var value = @trade_value_shared_burden } }
			}
			if = {
				limit = { has_pop_flag = trade_value_add_op_3 }
				root = { change_variable = { which = trade_value_add_op_3_var value = @trade_value_very_high } }
			}
			if = {
				limit = { has_pop_flag = trade_value_add_op_4 }
				root = { change_variable = { which = trade_value_add_op_4_var value = @trade_value_high } }
			}
			if = {
				limit = { has_pop_flag = trade_value_add_op_5 }
				root = { change_variable = { which = trade_value_add_op_5_var value = @trade_value_normal } }
			}
			if = {
				limit = { has_pop_flag = trade_value_add_op_6 }
				root = { change_variable = { which = trade_value_add_op_6_var value = @plantoid_budding_rate } }
			}
			if = {
				limit = { has_pop_flag = trade_value_add_op_8 }
				root = { change_variable = { which = trade_value_add_op_8_var value = @noxious_happiness_penalty } }
			}
			if = {
				limit = { has_pop_flag = trade_value_add_op_9 }
				root = { change_variable = { which = trade_value_add_op_9_var value = @trade_value_very_high } }
			}
			if = {
				limit = { has_pop_flag = trade_value_add_op_10 }
				root = { change_variable = { which = trade_value_add_op_10_var value = @trade_value_high } }
			}
			if = {
				limit = { has_pop_flag = trade_value_add_op_11 }
				root = { change_variable = { which = trade_value_add_op_11_var value = @trade_value_normal } }
			}
			if = {
				limit = { has_pop_flag = trade_value_add_op_12 }
				root = { change_variable = { which = trade_value_add_op_12_var value = @trade_value_low } }
			}
			if = {
				limit = { has_pop_flag = trade_value_add_op_13 }
				root = { change_variable = { which = trade_value_add_op_13_var value = @trade_value_very_high } }
			}
			if = {
				limit = { has_pop_flag = trade_value_add_op_14 }
				root = { change_variable = { which = trade_value_add_op_14_var value = @tiyanki_budding_rate } }
			}
			if = {
				limit = { has_pop_flag = clerk_has_planet_amenities_add_ring_trade_hub }
				root = { change_variable = { which = clerk_has_planet_amenities_add_ring_trade_hub_var value = 1 } }
			}
			if = {
				limit = { has_pop_flag = clerk_has_planet_amenities_add }
				root = { change_variable = { which = clerk_has_planet_amenities_add_var value = 2 } }
			}
		}
		set_variable = { which = trade_value_add_op_total value = 0 }
		set_variable = { which = asseble_value_add_op_total value = 0 }
		set_variable = { which = asseble_tiyanki_value_add_op_total value = 0 }
		#set_variable = { which = noxious_happiness_penalty_value_add_op_total value = 0 }
		set_variable = { which = planet_amenities_add_total value = 0 }
		change_variable = { which = trade_value_add_op_total value = trade_value_add_op_1_var }
		change_variable = { which = trade_value_add_op_total value = trade_value_add_op_2_var }
		change_variable = { which = trade_value_add_op_total value = trade_value_add_op_3_var }
		change_variable = { which = trade_value_add_op_total value = trade_value_add_op_4_var }
		change_variable = { which = trade_value_add_op_total value = trade_value_add_op_5_var }
		change_variable = { which = trade_value_add_op_total value = trade_value_add_op_9_var }
		change_variable = { which = trade_value_add_op_total value = trade_value_add_op_10_var }
		change_variable = { which = trade_value_add_op_total value = trade_value_add_op_11_var }
		change_variable = { which = trade_value_add_op_total value = trade_value_add_op_12_var }
		change_variable = { which = trade_value_add_op_total value = trade_value_add_op_13_var }
		change_variable = { which = asseble_value_add_op_total value = trade_value_add_op_6_var }
		change_variable = { which = asseble_tiyanki_value_add_op_total value = trade_value_add_op_14_var }
		#change_variable = { which = noxious_happiness_penalty_value_add_op_total value = trade_value_add_op_8_var }
		change_variable = { which = planet_amenities_add_total value = clerk_has_planet_amenities_add_ring_trade_hub_var }
		change_variable = { which = planet_amenities_add_total value = clerk_has_planet_amenities_add_var }
		multiply_variable = { which = planet_amenities_add_total value = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult| }
		add_modifier = { modifier = str_trade_pop multiplier = trade_value_add_op_total }
		add_modifier = { modifier = str_assemble_pop multiplier = asseble_value_add_op_total }
		add_modifier = { modifier = str_assemble_tiyanki_pop multiplier = asseble_tiyanki_value_add_op_total }
		#add_modifier = { modifier = str_pop_non_noxious_happiness_pop multiplier = noxious_happiness_penalty_value_add_op_total }
		add_modifier = { modifier = str_pop_planet_amenities_add multiplier = planet_amenities_add_total }
		set_update_modifiers_batch = end
	}
}

country_event = {
	id = vop_ai_fixed.9
	hide_window = yes
	is_triggered_only = yes
	trigger = { 
		is_ai = yes 
		OR = {
			any_owned_fleet = { count_owned_ship = { limit = { is_ship_size = corvette } count > 75 } }
			any_owned_fleet = { count_owned_ship = { limit = { is_ship_size = destroyer } count > 75 } }
			any_owned_fleet = { count_owned_ship = { limit = { is_ship_size = cruiser } count > 75 } }
		}
		has_existing_ship_design = battleship
	}
	immediate = {
		set_update_modifiers_batch = begin
		if = {
			limit = { any_owned_fleet = { count_owned_ship = {
				limit = { is_ship_size = corvette }
				count > 75
			} } }
			every_owned_fleet = {
				limit = { any_owned_ship = { is_ship_size = corvette } }
				clear_variable = corvette_ai_var
				export_trigger_value_to_variable = {
					trigger = count_owned_ship
					parameters = { limit = { is_ship_size = corvette } }
					variable = corvette_ai_var
				}
				divide_variable = { which = corvette_ai_var value = 10 }
				floor_variable = corvette_ai_var
				if = {
					limit = { check_variable = { which = corvette_ai_var value < 1 } }
					set_variable = { which = corvette_ai_var value = 0 }
				}
				else_if = {
					limit = { check_variable = { which = corvette_ai_var value >= 1 } }
					while = {
						count = corvette_ai_var
						create_ship = { random_existing_design = battleship }
					}
					every_owned_ship = { limit = { is_ship_size = corvette } destroy_ship = this }
				}
			}
		}
		if = {
			limit = { any_owned_fleet = { count_owned_ship = {
				limit = { is_ship_size = destroyer }
				count > 75
			} } }
			every_owned_fleet = {
				limit = { any_owned_ship = { is_ship_size = destroyer } }
				clear_variable = destroyer_ai_var
				export_trigger_value_to_variable = {
					trigger = count_owned_ship
					parameters = { limit = { is_ship_size = destroyer } }
					variable = destroyer_ai_var
				}
				divide_variable = { which = destroyer_ai_var value = 5 }
				floor_variable = destroyer_ai_var
				if = {
					limit = { check_variable = { which = destroyer_ai_var value < 1 } }
					set_variable = { which = destroyer_ai_var value = 0 }
				}
				else_if = {
					limit = { check_variable = { which = destroyer_ai_var value >= 1 } }
					while = {
						count = destroyer_ai_var
						create_ship = { random_existing_design = battleship }
					}
					every_owned_ship = { limit = { is_ship_size = destroyer } destroy_ship = this }
				}
			}
		}
		if = {
			limit = { any_owned_fleet = { count_owned_ship = {
				limit = { is_ship_size = cruiser }
				count > 75
			} } }
			every_owned_fleet = {
				limit = { any_owned_ship = { is_ship_size = cruiser } }
				clear_variable = cruiser_ai_var
				export_trigger_value_to_variable = {
					trigger = count_owned_ship
					parameters = { limit = { is_ship_size = cruiser } }
					variable = cruiser_ai_var
				}
				divide_variable = { which = cruiser_ai_var value = 2 }
				floor_variable = cruiser_ai_var
				if = {
					limit = { check_variable = { which = cruiser_ai_var value < 1 } }
					set_variable = { which = cruiser_ai_var value = 0 }
				}
				else_if = {
					limit = { check_variable = { which = cruiser_ai_var value >= 1 } }
					while = {
						count = cruiser_ai_var
						create_ship = { random_existing_design = battleship }
					}
					every_owned_ship = { limit = { is_ship_size = cruiser } destroy_ship = this }
				}
			}
		}
		set_update_modifiers_batch = end
	}
}

planet_event = {
	id = vop_ai_fixed.10
	hide_window = yes
	is_triggered_only = yes
	pre_triggers = { is_ai = yes }
	immediate = {
		set_update_modifiers_batch = begin
		if = {
			limit = { 
				num_pops > 150 
				NOT = { has_modifier = str_pop_static } 
			}
			add_modifier = { modifier = str_pop_static }
		}
		else_if = { 
			limit = { 
				num_pops <= 150 
				has_modifier = str_pop_static 
			} 
			remove_modifier = str_pop_static 
		}
		set_update_modifiers_batch = end
	}
}

# mod
country_event = {
	###科学家领导科研时加好感值
	id = vop_ai_fixed.21
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		years_passed > 50
		has_country_flag = ge_leader_suigintou_get
		research_leader = {
			area = society
			OR = {
				has_trait = leader_trait_ge_mercury_lamp_scientist
				has_leader_flag = ge_suigintou_flag
			}
		}
	}
	immediate = {
		every_owned_leader = {
			limit = {
				OR = {
					has_leader_flag = ge_suigintou_flag
					has_trait = leader_trait_ge_mercury_lamp
					has_trait = leader_trait_ge_mercury_lamp_scientist
				}
			}
			ge_add_aft_scientist_on_research = yes
		}
	}
}

country_event = {
	id = vop_ai_fixed.22
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		years_passed > 50
		has_country_flag = star_oath_project_has_used
	}

	immediate = {
		set_update_modifiers_batch = begin
		if = {
			limit = {
				any_owned_leader = {
					is_researching_area = engineering
					OR = {
						has_trait = leader_trait_scientist_SOP_knowledge_sharing_1
						has_trait = leader_trait_scientist_SOP_knowledge_sharing_2
						has_trait = leader_trait_scientist_SOP_knowledge_sharing_3
						has_trait = leader_trait_scientist_SOP_knowledge_sharing_4
					}
				}
			}
			change_variable = {
				which = count_sop_country_knowledge_sharing
				value = 1
			}
		}
		if = {
			limit = {
				any_owned_leader = {
					is_researching_area = society
					OR = {
						has_trait = leader_trait_scientist_SOP_knowledge_sharing_1
						has_trait = leader_trait_scientist_SOP_knowledge_sharing_2
						has_trait = leader_trait_scientist_SOP_knowledge_sharing_3
						has_trait = leader_trait_scientist_SOP_knowledge_sharing_4
					}
				}
			}
			change_variable = {
				which = count_sop_country_knowledge_sharing
				value = 1
			}
		}
		if = {
			limit = {
				any_owned_leader = {
					is_researching_area = physics
					OR = {
						has_trait = leader_trait_scientist_SOP_knowledge_sharing_1
						has_trait = leader_trait_scientist_SOP_knowledge_sharing_2
						has_trait = leader_trait_scientist_SOP_knowledge_sharing_3
						has_trait = leader_trait_scientist_SOP_knowledge_sharing_4
					}
				}
			}
			change_variable = {
				which = count_sop_country_knowledge_sharing
				value = 1
			}
		}
		if = {
			limit = {
				any_owned_leader = {
					OR = {
						is_researching_area = engineering
						is_researching_area = society
						is_researching_area = physics
					}
					has_trait = leader_trait_scientist_SOP_belfast_T1
				}
			}
			every_owned_leader = {
				limit = {
					sop_leader_trigger = yes
				}
				add_experience = 20
			}
			root = {
				change_variable = {
					which = sop_belfas_skill_has_used_count
					value = 1
				}
			}
		}
		else_if = {
			limit = {
				any_owned_leader = {
					OR = {
						is_researching_area = engineering
						is_researching_area = society
						is_researching_area = physics
					}
					has_trait = leader_trait_scientist_SOP_belfast_T2
				}
			}
			every_owned_leader = {
				limit = {
					sop_leader_trigger = yes
				}
				add_experience = 40
			}
			root = {
				change_variable = {
					which = sop_belfas_skill_has_used_count
					value = 2
				}
			}
		}
		else_if = {
			limit = {
				any_owned_leader = {
					OR = {
						is_researching_area = engineering
						is_researching_area = society
						is_researching_area = physics
					}
					has_trait = leader_trait_scientist_SOP_belfast_T3
				}
			}
			every_owned_leader = {
				limit = {
					sop_leader_trigger = yes
				}
				add_experience = 60
			}
			root = {
				change_variable = {
					which = sop_belfas_skill_has_used_count
					value = 3
				}
			}
		}
		if = {
			limit = {
				any_owned_leader = {
					OR = {
						is_researching_area = engineering
						is_researching_area = society
						is_researching_area = physics
					}
					has_trait = leader_trait_scientist_SOP_okabe_T1
				}
			}
			every_owned_leader = {
				limit = {
					sop_leader_trigger = yes
				}
				add_experience = 10
			}
			root = {
				change_variable = {
					which = sop_belfas_skill_has_used_count
					value = 2
				}
			}
		}
		else_if = {
			limit = {
				any_owned_leader = {
					OR = {
						is_researching_area = engineering
						is_researching_area = society
						is_researching_area = physics
					}
					has_trait = leader_trait_scientist_SOP_okabe_T2
				}
			}
			every_owned_leader = {
				limit = {
					sop_leader_trigger = yes
				}
				add_experience = 20
			}
			root = {
				change_variable = {
					which = sop_belfas_skill_has_used_count
					value = 4
				}
			}
		}
		if = {
			limit = {
				any_owned_leader = {
					OR = {
						is_researching_area = engineering
						is_researching_area = society
						is_researching_area = physics
					}
					has_leader_flag = SOP_noel_mobius
				}
			}
			root = {
				change_variable = {
					which = count_noel_mobius_tech_finish
					value = 1
				}
			}
		}
		if = {
			limit = {
				any_owned_leader = {
					OR = {
						is_researching_area = engineering
						is_researching_area = society
						is_researching_area = physics
					}
					has_leader_flag = SOP_abigail
				}
			}
			root = {
				change_variable = {
					which = count_abigail_tech_finish
					value = 1
				}
			}
		}
		if = {
			limit = {
				any_owned_leader = {
					OR = {
						is_researching_area = engineering
						is_researching_area = society
						is_researching_area = physics
					}
					has_trait = leader_trait_scientist_SOP_reines_T3
				}
			}
			every_owned_leader = {
				limit = {
					sop_leader_trigger = yes
				}
				add_experience = 40
			}
		}
		if = {
			limit = {
				any_owned_leader = {
					OR = {
						is_researching_area = engineering
						is_researching_area = society
						is_researching_area = physics
					}
					has_leader_flag = SOP_patchouli
				}
			}
			random_list = {
				20 = {
					modifier = {
						add = -10
						any_owned_leader = {
							OR = {
								is_researching_area = engineering
								is_researching_area = society
								is_researching_area = physics
							}
							has_trait = leader_trait_scientist_SOP_patchouli_T2
						}
					}
					modifier = {
						add = -20
						any_owned_leader = {
							OR = {
								is_researching_area = engineering
								is_researching_area = society
								is_researching_area = physics
							}
							has_trait = leader_trait_scientist_SOP_patchouli_T3
						}
					}
				}
				10 ={
					random_list = {
						3 = {
							remove_modifier = sop_scientist_skill_patchouli_01
							add_modifier = {
								modifier = sop_scientist_skill_patchouli_01
								days = 90
							}
						}
						3 = {
							remove_modifier = sop_scientist_skill_patchouli_02
							add_modifier = {
								modifier = sop_scientist_skill_patchouli_02
								days = 90
							}
						}
						3 = {
							remove_modifier = sop_scientist_skill_patchouli_03
							add_modifier = {
								modifier = sop_scientist_skill_patchouli_03
								days = 90
							}
						}
						3 = {
							remove_modifier = sop_scientist_skill_patchouli_04
							add_modifier = {
								modifier = sop_scientist_skill_patchouli_04
								days = 90
							}
						}
						3 = {
							remove_modifier = sop_scientist_skill_patchouli_05
							add_modifier = {
								modifier = sop_scientist_skill_patchouli_05
								days = 90
							}
						}
						2 = {
							remove_modifier = sop_scientist_skill_patchouli_06
							add_modifier = {
								modifier = sop_scientist_skill_patchouli_06
								days = 90
							}
						}
						2 = {
							remove_modifier = sop_scientist_skill_patchouli_07
							add_modifier = {
								modifier = sop_scientist_skill_patchouli_07
								days = 90
							}
						}
					}
					if = {
						limit = {
							NOT = {
								has_country_flag = star_oath_not_use_sound
							}
						}
						random_list = {
							3 = {
								play_sound = SOP_patchouli_SkillActivationJP01
							}
							3 = {
								play_sound = SOP_patchouli_SkillActivationJP02
							}
						}
					}
				}
			}
		}
		set_update_modifiers_batch = end
	}
}