################################
#
# Origin Events
# Written and Modded by Eddy
#
###############################
namespace = vop_ai_fixed
event = {
	id = vop_ai_fixed.1
	hide_window = yes
	is_triggered_only = yes
	trigger = { any_playable_country = { is_ai = no } }
	immediate = { every_playable_country = { limit = { is_ai = no } country_event = { id = vop_ai_fixed.2 } } }
}
country_event = {
	id = vop_ai_fixed.2
	title = vop_ai_fixed.title
	desc = vop_ai_fixed.desc
	picture = GFX_evt_society_cache
	show_sound = event_scanner
	is_advisor_event = yes
	is_triggered_only = yes
	option = { name = vop_ai_fixed.a }
}


@noxious_happiness_penalty = -0.01
@pop_happiness_unemply_rate = 0.10
event = {
	id = vop_ai_fixed.5
	hide_window = yes
	is_triggered_only = yes
	trigger = { 
		NOT = { has_global_flag = VOP_CD_vop_ai_fixed }
		count_playable_country = { count > 0 } 
	}
	immediate = {
		set_timed_global_flag = { flag = VOP_CD_vop_ai_fixed days = 1 }
		#set_update_modifiers_batch = begin
		# action.116
		if = {
			limit = {
				years_passed > 50
				has_global_flag = galactic_market_founded
				OR = {
					NOT = { is_on_market = volatile_motes }
					NOT = { is_on_market = exotic_gases }
					NOT = { is_on_market = rare_crystals }
					NOT = { is_on_market = sr_living_metal }
					NOT = { is_on_market = sr_zro }
					NOT = { is_on_market = sr_dark_matter }
				}
			}
			if = {
				limit = {
					NOT = { is_on_market = volatile_motes }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = volatile_motes value >= 1 }
					}
				}
				enable_on_market = volatile_motes
			}
			else_if = {
				limit = {
					NOT = { is_on_market = exotic_gases }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = exotic_gases value >= 1 }
					}
				}
				enable_on_market = exotic_gases
			}
			else_if = {
				limit = {
					NOT = { is_on_market = rare_crystals }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = rare_crystals value >= 1 }
					}
				}
				enable_on_market = rare_crystals
			}
			else_if = {
				limit = {
					NOT = { is_on_market = sr_living_metal }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = sr_living_metal value >= 1 }
					}
				}
				enable_on_market = sr_living_metal
			}
			else_if = {
				limit = {
					NOT = { is_on_market = sr_zro }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = sr_zro value >= 1 }
					}
				}
				enable_on_market = sr_zro
			}
			else_if = {
				limit = {
					NOT = { is_on_market = sr_dark_matter }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = sr_dark_matter value >= 1 }
					}
				}
				enable_on_market = sr_dark_matter
			}
		}
		every_system = {
			remove_star_flag = can_enable_can_be_system_blocks_sensors
			if = {
				limit = { OR = {
					##_|星云|	+RS/Sexp
					is_inside_nebula = yes
					has_modifier = space_storm
					##_|封印星系|	+Sexp
					has_star_flag = lcluster
					has_star_flag = sealed_system
				} }
				set_star_flag = can_enable_can_be_system_blocks_sensors
			}
		}
		# action 90
		if = {
			limit = { 
				any_playable_country = { any_owned_planet = {
					is_controlled_by = PREV
					solar_system = { NOT = { exists = starbase } }
				} }
				any_country = { is_nivirana_battle_country = yes }
			}
			every_system = {
				limit = {
					NOT = { exists = starbase }
					any_system_colony = {
						exists = owner
						has_ground_combat = no
						owner = { OR = {
							is_country_type = default
							is_country_type = fallen_empire
							is_country_type = awakened_fallen_empire
						} }
						solar_system = { NOR = {
							any_fleet_in_system = {
								exists = owner
								owner = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_hostile = prevprevprev.owner
										is_at_war_with = prevprevprev.owner
									}
								}
							}
							any_fleet_in_system = {
								exists = controller
								controller = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_hostile = prevprevprev.owner
										is_at_war_with = prevprevprev.owner
									}
								}
							}
							any_system_colony = {
								exists = owner
								NOT = { is_same_value = prevprev }
								owner = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_country_type = default
										is_country_type = fallen_empire
										is_country_type = awakened_fallen_empire
									}
								}
							}
						} }
					}
				}
				random_system_colony = {
					limit = {
						exists = owner
						has_ground_combat = no
						owner = { OR = {
							is_country_type = default
							is_country_type = fallen_empire
							is_country_type = awakened_fallen_empire
						} }
						solar_system = { NOR = {
							any_fleet_in_system = {
								exists = owner
								owner = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_hostile = prevprevprev.owner
										is_at_war_with = prevprevprev.owner
									}
								}
							}
							any_fleet_in_system = {
								exists = controller
								controller = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_hostile = prevprevprev.owner
										is_at_war_with = prevprevprev.owner
									}
								}
							}
							any_system_colony = {
								exists = owner
								owner = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_country_type = default
										is_country_type = fallen_empire
										is_country_type = awakened_fallen_empire
									}
								}
							}
						} }
					}
					planet_event = { id = action.91 }
				}
			}
		}
		# country_event tech
		every_country = {
			# warcb
			remove_country_flag = VOP_cb_CNTR_has_stop_colossus_cb
			remove_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_1
			remove_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_2
			remove_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_3
			remove_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_4
			if = {
				limit = { any_controlled_fleet = {
					is_ship_class = shipclass_military_special
					any_controlled_ship = { is_ship_size = colossus }
				} }
				set_country_flag = VOP_cb_CNTR_has_stop_colossus_cb
			}
			if = {
				limit = { VOP_cb_CNTR_has_total_war_cb_SECTION_1 = yes }
				set_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_1
			}
			if = {
				limit = { VOP_cb_CNTR_has_total_war_cb_SECTION_2 = yes }
				set_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_2
			}
			if = {
				limit = { VOP_cb_CNTR_has_total_war_cb_SECTION_3 = yes }
				set_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_3
			}
			if = {
				limit = { VOP_cb_CNTR_has_total_war_cb_SECTION_4 = yes }
				set_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_4
			}
			# enclave 2065
			if = {
				limit = {
					is_country_type = enclave_mercenary
					any_owned_fleet = { is_leased = no }
				}
				country_event = { id = enclave.2070 }
			}
			#SHIP OP
			if = {
				limit = {  
					is_ai = yes 
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
						is_country_type = default
						is_country_type = enclave_mercenary
					}
					OR = {
						any_owned_fleet = { count_owned_ship = { limit = { is_ship_size = frigate } count > 20 } }
						any_owned_fleet = { count_owned_ship = { limit = { is_ship_size = corvette } count > 20 } }
						any_owned_fleet = { count_owned_ship = { limit = { is_ship_size = destroyer } count > 15 } }
						any_owned_fleet = { count_owned_ship = { limit = { is_ship_size = cruiser } count > 10 } }
						any_owned_fleet = { count_owned_ship = { limit = { is_ship_size = small_ship_fallen_empire } count > 10 } }
					}
					OR = {
						has_existing_ship_design = battleship
						has_existing_ship_design = large_ship_fallen_empire
					}
				}
				if = {
					limit = {  
						any_owned_fleet = { count_owned_ship = {
							limit = { is_ship_size = small_ship_fallen_empire }
							count > 10
						} }
						has_existing_ship_design = large_ship_fallen_empire
					}
					every_owned_fleet = {
						limit = { any_owned_ship = { is_ship_size = small_ship_fallen_empire } }
						clear_variable = small_ship_fallen_empire_ai_var
						export_trigger_value_to_variable = {
							trigger = count_owned_ship
							parameters = { limit = { is_ship_size = small_ship_fallen_empire } }
							variable = small_ship_fallen_empire_ai_var
						}
						divide_variable = { which = small_ship_fallen_empire_ai_var value = 10 }
						floor_variable = small_ship_fallen_empire_ai_var
						if = {
							limit = { check_variable = { which = small_ship_fallen_empire_ai_var value < 1 } }
							set_variable = { which = small_ship_fallen_empire_ai_var value = 0 }
						}
						else_if = {
							limit = { check_variable = { which = small_ship_fallen_empire_ai_var value >= 1 } }
							while = {
								count = small_ship_fallen_empire_ai_var
								create_ship = { random_existing_design = large_ship_fallen_empire }
							}
							every_owned_ship = { limit = { is_ship_size = small_ship_fallen_empire } destroy_ship = this }
						}
					}
				}
				if = {
					limit = {  
						any_owned_fleet = { count_owned_ship = {
							limit = { is_ship_size = corvette }
							count > 20
						} }
						has_existing_ship_design = battleship
					}
					every_owned_fleet = {
						limit = { any_owned_ship = { is_ship_size = corvette } }
						clear_variable = corvette_ai_var
						export_trigger_value_to_variable = {
							trigger = count_owned_ship
							parameters = { limit = { is_ship_size = corvette } }
							variable = corvette_ai_var
						}
						divide_variable = { which = corvette_ai_var value = 20 }
						floor_variable = corvette_ai_var
						if = {
							limit = { check_variable = { which = corvette_ai_var value < 1 } }
							set_variable = { which = corvette_ai_var value = 0 }
						}
						else_if = {
							limit = { check_variable = { which = corvette_ai_var value >= 1 } }
							while = {
								count = corvette_ai_var
								create_ship = { random_existing_design = battleship }
							}
							every_owned_ship = { limit = { is_ship_size = corvette } destroy_ship = this }
						}
					}
				}
				if = {
					limit = {  
						any_owned_fleet = { count_owned_ship = {
							limit = { is_ship_size = frigate }
							count > 20
						} }
						has_existing_ship_design = battleship
					}
					every_owned_fleet = {
						limit = { any_owned_ship = { is_ship_size = frigate } }
						clear_variable = frigate_ai_var
						export_trigger_value_to_variable = {
							trigger = count_owned_ship
							parameters = { limit = { is_ship_size = frigate } }
							variable = frigate_ai_var
						}
						divide_variable = { which = frigate_ai_var value = 20 }
						floor_variable = frigate_ai_var
						if = {
							limit = { check_variable = { which = frigate_ai_var value < 1 } }
							set_variable = { which = frigate_ai_var value = 0 }
						}
						else_if = {
							limit = { check_variable = { which = frigate_ai_var value >= 1 } }
							while = {
								count = frigate_ai_var
								create_ship = { random_existing_design = battleship }
							}
							every_owned_ship = { limit = { is_ship_size = frigate } destroy_ship = this }
						}
					}
				}
				if = {
					limit = {  
						any_owned_fleet = { count_owned_ship = {
							limit = { is_ship_size = destroyer }
							count > 15
						} }
						has_existing_ship_design = battleship
					}
					every_owned_fleet = {
						limit = { any_owned_ship = { is_ship_size = destroyer } }
						clear_variable = destroyer_ai_var
						export_trigger_value_to_variable = {
							trigger = count_owned_ship
							parameters = { limit = { is_ship_size = destroyer } }
							variable = destroyer_ai_var
						}
						divide_variable = { which = destroyer_ai_var value = 15 }
						floor_variable = destroyer_ai_var
						if = {
							limit = { check_variable = { which = destroyer_ai_var value < 1 } }
							set_variable = { which = destroyer_ai_var value = 0 }
						}
						else_if = {
							limit = { check_variable = { which = destroyer_ai_var value >= 1 } }
							while = {
								count = destroyer_ai_var
								create_ship = { random_existing_design = battleship }
							}
							every_owned_ship = { limit = { is_ship_size = destroyer } destroy_ship = this }
						}
					}
				}
				if = {
					limit = {  
						any_owned_fleet = { count_owned_ship = {
							limit = { is_ship_size = cruiser }
							count > 10
						} }
						has_existing_ship_design = battleship
					}
					every_owned_fleet = {
						limit = { any_owned_ship = { is_ship_size = cruiser } }
						clear_variable = cruiser_ai_var
						export_trigger_value_to_variable = {
							trigger = count_owned_ship
							parameters = { limit = { is_ship_size = cruiser } }
							variable = cruiser_ai_var
						}
						divide_variable = { which = cruiser_ai_var value = 10 }
						floor_variable = cruiser_ai_var
						if = {
							limit = { check_variable = { which = cruiser_ai_var value < 1 } }
							set_variable = { which = cruiser_ai_var value = 0 }
						}
						else_if = {
							limit = { check_variable = { which = cruiser_ai_var value >= 1 } }
							while = {
								count = cruiser_ai_var
								create_ship = { random_existing_design = battleship }
							}
							every_owned_ship = { limit = { is_ship_size = cruiser } destroy_ship = this }
						}
					}
				}
			}
			#TECH OP
			if = {
				limit = { OR = { 
					NOT = { has_ethic = ethic_gestalt_consciousness }
					is_active_resolution = resolution_galacticstudies_extradimensional_experimentation
					has_relic = r_zro_crystal
				} }
				remove_country_flag = pop_has_trait_psionic
				remove_country_flag = pop_has_trait_latent_psionic
				if = {
					limit = { any_owned_pop = {
						pop_has_trait = trait_psionic
					} }
					set_country_flag = pop_has_trait_psionic
				}
				if = {
					limit = { any_owned_pop = {
						pop_has_trait = trait_latent_psionic
					} }
					set_country_flag = pop_has_trait_latent_psionic
				}
			}
			if = {
				limit = { is_regular_empire = yes }
				remove_country_flag = is_enslaved_var_more_than_9
				remove_country_flag = is_enslaved_var_more_than_19
				remove_country_flag = is_enslaved_var_more_than_29
				remove_country_flag = is_enslaved_var_more_than_initial
				if = {
					limit = { count_owned_pop = {
						limit = { is_enslaved = yes }
						count > 29
					} }
					set_country_flag = is_enslaved_var_more_than_29
					set_country_flag = is_enslaved_var_more_than_19
					set_country_flag = is_enslaved_var_more_than_9
				}
				else_if = {
					limit = { count_owned_pop = {
						limit = { is_enslaved = yes }
						count > 19
					} }
					set_country_flag = is_enslaved_var_more_than_19
					set_country_flag = is_enslaved_var_more_than_9
				}
				else_if = {
					limit = { count_owned_pop = {
						limit = { is_enslaved = yes }
						count > 9
					} }
					set_country_flag = is_enslaved_var_more_than_9
				}
				if = {
					limit = { OR = {
						allows_slavery = no
						NOT = { any_owned_pop = { is_enslaved = yes } }
					} }
					set_country_flag = is_enslaved_var_more_than_initial
				}
			}
		}
		# pop events
		every_galaxy_pop = {
			species = {
				remove_species_flag = can_enable_species_has_happiness
				remove_species_flag = can_enable_should_force_decline_species
				remove_species_flag = can_has_food_upkeep
			}
			remove_pop_flag = can_enable_pop_election_vote
			remove_pop_flag = can_enable_pop_has_random_ethics
			remove_pop_flag = can_enable_can_generate_military_leader_from_pop
			remove_pop_flag = can_enable_can_generate_leader_from_pop
			#speces [GAME RULE]
			species = { 
				if = {
					limit = { can_have_food_upkeep_species = yes }
					set_species_flag = can_has_food_upkeep
				} 
				#happiniess species
				if = {
					limit = { NOR = {
						has_trait = trait_machine_unit
						has_trait = trait_hive_mind
						can_think = no
						AND = {
							has_trait = trait_mechanical
							OR = {
								NOT = { exists = owner }
								owner = { has_authority = auth_machine_intelligence }
								owner = { NOT = { has_technology = tech_synthetic_workers } }
								owner = { has_policy_flag = ai_outlawed }
							}
						}
						AND = {
							has_trait = trait_cybernetic
							exists = owner
							owner = {
								has_authority = auth_machine_intelligence
								has_civic = civic_machine_assimilator # Assimilator empire
							}
						}
					} }
					set_species_flag = can_enable_species_has_happiness
				}
				# should_force_decline_species
				if = {
					limit = {
						OR = {
							has_trait = trait_clone_soldier_infertile
							has_trait = trait_clone_soldier_infertile_full_potential
						}
						prev.planet = {
							OR = {
								# Check if country is unable to build Vats for this species.
								AND = {
									exists = owner
									owner = {
										OR = {
											NOT = { has_origin = origin_clone_army }					# Can't have Vats.
											has_country_flag = clone_army_fertility_unlocked			# Can't have Vats anymore.
											NOT = { owner_main_species = { is_same_species = prevprevprev } }	# Our Vats can't build this species.
										}
									}
								}
								# Vats check out, but are there more pops than Vats support?
								check_variable = { which = clone_pops_missing value < 0 }
							}
						}
					}
					set_species_flag = can_enable_should_force_decline_species
				}
			}
			#canpopvote [GAME RULE]
			if = {
				limit = { 
					has_citizenship_rights = yes
					is_sapient = yes
					is_enslaved = no
					is_being_purged = no
				}
				set_pop_flag = can_enable_pop_election_vote
			}
			#pop_has_random_ethics [GAME RULE]
			if = {
				limit = { NOT = { has_citizenship_type = { country = owner type = citizenship_organic_trophy } } }
				set_pop_flag = can_enable_pop_has_random_ethics
			}
			#can_generate_military_leader_from_pop [GAME RULE]
			if = {
				limit = {  
					can_be_military_leader = yes
					OR = {
						is_robot_pop = no
						AND = {
							exists = owner
							owner = {
								OR = {
									has_technology = tech_synthetic_leaders
									has_authority = auth_machine_intelligence
									is_mechanical_empire = yes
								}
							}
						}
					}
					OR = {
						is_same_species = owner
						owner = {
							NAND = {
								has_origin = origin_necrophage
								has_trait = trait_necrophage
							}
						}
					}
				}
				set_pop_flag = can_enable_can_generate_military_leader_from_pop
			}
			#can_generate_leader_from_pop [GAME RULE]
			if = {
				limit = { 
					has_citizenship_rights = yes
					NOT = { has_trait = trait_syncretic_proles }
					can_think = yes
					OR = {
						is_robot_pop = no
						owner = {
							OR = {
								has_technology = tech_synthetic_leaders
								has_authority = auth_machine_intelligence
								is_mechanical_empire = yes
							}
						}
					}
					OR = {
						is_same_species = owner
						owner = {
							NAND = {
								has_origin = origin_necrophage
								has_trait = trait_necrophage
							}
						}
					}
				}
				set_pop_flag = can_enable_can_generate_leader_from_pop
			}
			#[POP SECTION]
			if = {
				limit = { exists = owner }
				remove_pop_flag = enable_purge_pop_assign_to_pop
				remove_pop_flag = enable_robot_servant_pop_assign_to_pop
				remove_pop_flag = enable_precursor_pop_assign_to_pop
				remove_pop_flag = enable_work_pop_assign_to_pop
				remove_pop_flag = enable_simple_drone_assign_to_pop
				remove_pop_flag = enable_bio_trophy_pop_assign_to_pop
				remove_pop_flag = enable_should_apply_unemployment_penalties_op
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_1
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_2
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_3
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_4
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_5
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_6
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_7
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_8
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_9
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_10
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_11
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_12
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_13
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_14
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_15
				remove_pop_flag = VOP_job_POP_clerk_has_planet_amenities_add
				remove_pop_flag = VOP_job_POP_clerk_has_planet_amenities_add_ring_trade_hub
				remove_pop_flag = VOP_job_POP_enable_canbe_enforcer_jobs_pop
				remove_pop_flag = VOP_job_POP_enable_canbe_entertainer_jobs_pop
				remove_pop_flag = VOP_job_POP_enable_canbe_fe_xeno_ward_jobs_pop
				remove_pop_flag = VOP_job_POP_enable_canbe_fe_hedonist_jobs_pop
				remove_pop_flag = VOP_livestanderd_POP_exotic_metabolism_op_1
				remove_pop_flag = VOP_livestanderd_POP_has_food_upkeep_op_1
				remove_pop_flag = VOP_livestanderd_POP_has_food_upkeep_op_2
				remove_pop_flag = VOP_livestanderd_POP_has_minerals_upkeep_op_1
				remove_pop_flag = VOP_livestanderd_POP_has_minerals_upkeep_op_2
				remove_pop_flag = VOP_livestanderd_POP_has_phototrophic_energy_upkeep_op
				remove_pop_flag = VOP_livestanderd_POP_has_energy_upkeep_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_efficient_processors_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_logic_engines_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_loyalty_circuits_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_double_jointed_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_enhanced_memory_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_durable_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_learning_algorithms_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_trading_algorithms_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_streamlined_protocols_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_consumer_goods_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_alloys_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_unity_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_gas_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_crystal_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_motes_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_zro_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_dark_matter_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_living_metal_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_nanites_op
				remove_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_1
				remove_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_2
				remove_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_3
				remove_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_4
				remove_pop_flag = VOP_livestanderd_POP_living_standard_normal_1
				remove_pop_flag = VOP_livestanderd_POP_living_standard_normal_2
				owner = { remove_country_flag = enable_allows_alien_leaders }
				#speceis_right
				if = {
					limit = { 
						NAND = {
							exists = owner
							owner = { has_deficit = consumer_goods }
						}
					}
					set_pop_flag = VOP_livestanderd_POP_living_standard_normal_1
				}
				if = {
					limit = { 
						is_unemployed = yes
					}
					set_pop_flag = VOP_livestanderd_POP_living_standard_normal_2
				}
				#resource [Pop category]
				if = {
					limit = { NOT = { has_global_flag = VOP_settings_POP_cate_disable_resource } }
					if = {
						limit = { 
							is_organic_species = yes
							has_trait = trait_exotic_metabolism
						}
						set_pop_flag = VOP_livestanderd_POP_exotic_metabolism_op_1
					}
					if = {
						limit = { 
							has_food_upkeep = yes
							is_phototrophic = no
						}
						set_pop_flag = VOP_livestanderd_POP_has_food_upkeep_op_1
					}
					if = {
						limit = { 
							has_food_upkeep = yes
							is_phototrophic = yes
						}
						set_pop_flag = VOP_livestanderd_POP_has_food_upkeep_op_2
					}
					if = {
						limit = { 
							has_mineral_upkeep = yes
							is_phototrophic = no
						}
						set_pop_flag = VOP_livestanderd_POP_has_minerals_upkeep_op_1
					}
					if = {
						limit = { 
							has_mineral_upkeep = yes
							is_phototrophic = yes
						}
						set_pop_flag = VOP_livestanderd_POP_has_minerals_upkeep_op_2
					}
					if = {
						limit = { 
							has_phototrophic_energy_upkeep = yes
						}
						set_pop_flag = VOP_livestanderd_POP_has_phototrophic_energy_upkeep_op
					}
					if = {
						limit = { 
							has_energy_upkeep = yes
						}
						set_pop_flag = VOP_livestanderd_POP_has_energy_upkeep_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_efficient_processors
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_efficient_processors_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_logic_engines
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_logic_engines_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_loyalty_circuits
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_loyalty_circuits_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_double_jointed
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_double_jointed_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_enhanced_memory
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_enhanced_memory_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_durable
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_durable_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_learning_algorithms
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_learning_algorithms_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_trading_algorithms
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_trading_algorithms_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_streamlined_protocols
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_streamlined_protocols_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_consumer_goods
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_consumer_goods_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_alloys
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_alloys_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_unity
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_unity_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_gas
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_gas_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_crystal
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_crystal_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_motes
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_motes_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_zro
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_zro_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_dark_matter
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_dark_matter_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_living_metal
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_living_metal_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_nanites
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_nanites_op
					}
					if = {
						limit = { 
							OR = {
								has_trait = trait_lithoid_scintillating
								has_trait = trait_advanced_scintillating
							}
						}
						set_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_1
					}
					if = {
						limit = { 
							OR = {
								has_trait = trait_lithoid_gaseous_byproducts
								has_trait = trait_advanced_gaseous_byproducts
							}
						}
						set_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_2
					}
					if = {
						limit = { 
							OR = {
								has_trait = trait_lithoid_volatile_excretions
								has_trait = trait_advanced_volatile_excretions
							}
						}
						set_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_3
					}
					if = {
						limit = { 
							OR = {
								has_trait = trait_notofthisworld
								has_trait = trait_robot_notofthisworld
							}
						}
						set_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_4
					}
				}
				#trigger_modifier [Pop category]
				if = {
					limit = { NOT = { has_global_flag = VOP_settings_POP_cate_disable_trigger_modifier } }
					switch = {
						trigger = has_job_category
						ruler = {
							if = {
								limit = { 
									NOR = {
										has_very_high_living_standard_type = yes
										has_high_living_standard_type = yes
										has_shared_burden_living_standard_type = yes
									}
								}
								set_pop_flag = enable_should_apply_unemployment_penalties_op
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									OR = {
										has_academic_living_standard_type = yes
										has_very_high_living_standard_type = yes
										has_high_living_standard_type = yes
										has_normal_living_standard_type = yes
										has_stratified_living_standard_type = yes
										has_decadent_living_standard_type = yes
									}
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_13
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									prosperity_gospel_check_trigger = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_1
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_shared_burden_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_2
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_low_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_5
							}
							if = {
								limit = { can_assemble_budding_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_6
							}
							if = {
								limit = { can_assemble_tiyanki_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_14
							}
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
							if = {
								limit = {
									has_global_flag = galactic_community_resolution_divinity_comfort_the_fallen
									is_unemployed = yes
									has_pop_flag = enable_should_apply_unemployment_penalties_op
									exists = owner
									owner = { is_galactic_community_member = yes }
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_15
							}
						}
						specialist = {
							if = {
								limit = { 
									NOR = {
										has_very_high_living_standard_type = yes
										has_high_living_standard_type = yes
										has_shared_burden_living_standard_type = yes
									}
								}
								set_pop_flag = enable_should_apply_unemployment_penalties_op
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									OR = {
										has_academic_living_standard_type = yes
										has_very_high_living_standard_type = yes
										has_decadent_living_standard_type = yes
									}
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_3
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									OR = {
										has_high_living_standard_type = yes
										has_normal_living_standard_type = yes
										has_stratified_living_standard_type = yes
									}
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_4
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									prosperity_gospel_check_trigger = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_1
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_shared_burden_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_2
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_low_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_5
							}
							if = {
								limit = { can_assemble_budding_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_6
							}
							if = {
								limit = { can_assemble_tiyanki_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_14
							}
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
							if = {
								limit = {
									has_global_flag = galactic_community_resolution_divinity_comfort_the_fallen
									is_unemployed = yes
									has_pop_flag = enable_should_apply_unemployment_penalties_op
									exists = owner
									owner = { is_galactic_community_member = yes }
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_15
							}
						}
						worker = {
							if = {
								limit = { 
									exists = owner
									owner = { is_gestalt = no }
								}
								set_pop_flag = enable_work_pop_assign_to_pop
							}
							if = {
								limit = { 
									NOR = {
										has_very_high_living_standard_type = yes
										has_high_living_standard_type = yes
										has_shared_burden_living_standard_type = yes
									}
								}
								set_pop_flag = enable_should_apply_unemployment_penalties_op
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									OR = {
										has_decadent_living_standard_type = yes
										has_very_high_living_standard_type = yes
									}
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_9
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_high_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_10
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									OR = {
										has_normal_living_standard_type = yes
										has_academic_living_standard_type = yes
									}
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_11
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_stratified_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_12
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									prosperity_gospel_check_trigger = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_1
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_shared_burden_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_2
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_low_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_5
							}
							if = {
								limit = { can_assemble_budding_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_6
							}
							if = {
								limit = { can_assemble_tiyanki_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_14
							}
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
							if = {
								limit = {
									has_global_flag = galactic_community_resolution_divinity_comfort_the_fallen
									is_unemployed = yes
									has_pop_flag = enable_should_apply_unemployment_penalties_op
									exists = owner
									owner = { is_galactic_community_member = yes }
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_15
							}
						}
						complex_drone = {
							if = {
								limit = { can_assemble_budding_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_6
							}
							if = {
								limit = { can_assemble_tiyanki_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_14
							}
						}
						simple_drone = {
							if = {
								limit = { 
									exists = owner
									owner = { is_gestalt = yes }
								}
								set_pop_flag = enable_simple_drone_assign_to_pop
							}
							if = {
								limit = { can_assemble_budding_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_6
							}
							if = {
								limit = { can_assemble_tiyanki_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_14
							}
						}
						deviant_drone = {
							if = {
								limit = { 
									NOR = {
										has_very_high_living_standard_type = yes
										has_high_living_standard_type = yes
									}
								}
								set_pop_flag = enable_should_apply_unemployment_penalties_op
							}
						}
						corrupt_drone = {
							if = {
								limit = { 
									NOR = {
										has_very_high_living_standard_type = yes
										has_high_living_standard_type = yes
									}
								}
								set_pop_flag = enable_should_apply_unemployment_penalties_op
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_low_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_5
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_shared_burden_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_2
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									OR = {
										has_normal_living_standard_type = yes
										has_academic_living_standard_type = yes
									}
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_11
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_high_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_10
							}
						}
						slave = {
							if = {
								limit = { can_assemble_budding_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_6
							}
							if = {
								limit = { can_assemble_tiyanki_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_14
							}
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
						}
						bio_trophy = {
							if = {
								limit = { 
									exists = owner
									has_citizenship_type = { type = citizenship_organic_trophy country = owner }
								}
								set_pop_flag = enable_bio_trophy_pop_assign_to_pop
							}
							if = {
								limit = { can_assemble_budding_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_6
							}
							if = {
								limit = { can_assemble_tiyanki_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_14
							}
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
							if = {
								limit = {
									has_global_flag = galactic_community_resolution_divinity_comfort_the_fallen
									is_unemployed = yes
									has_pop_flag = enable_should_apply_unemployment_penalties_op
									exists = owner
									owner = { is_galactic_community_member = yes }
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_15
							}
						}
						pre_sapients = {
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
						}
						xeno_ward = {
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
						}
						criminal = {
							if = {
								limit = { 
									NOR = {
										has_very_high_living_standard_type = yes
										has_high_living_standard_type = yes
									}
								}
								set_pop_flag = enable_should_apply_unemployment_penalties_op
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_low_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_5
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_shared_burden_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_2
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									OR = {
										has_normal_living_standard_type = yes
										has_academic_living_standard_type = yes
									}
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_11
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_high_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_10
							}
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
						}
						purge = {
							if = {
								limit = { OR = {
									is_being_purged = yes
									has_pop_flag = event_purge
									AND = { # controlled by crisis
										exists = planet
										planet = {
											exists = controller
											controller = {
												OR = {
													is_country_type = ai_empire
													is_country_type = swarm
												}
											}
										}
										OR = { # contingency won't purge itself
											NOT = { exists = event_target:custodian_bot }
											AND = {
												exists = event_target:custodian_bot
												NOT = { species = { is_same_value = event_target:custodian_bot } }
											}
										}
									}
								} }
								set_pop_flag = enable_purge_pop_assign_to_pop
							}
						}
						precursor = {
							if = {
								limit = { 
									exists = owner
									owner = {
										OR = {
											is_country_type = fallen_empire
											is_country_type = awakened_fallen_empire
										}
									}
									OR = {
										is_same_species = owner
										owner = {
											is_fallen_empire_spiritualist = yes
										}
									}
								}
								set_pop_flag = enable_precursor_pop_assign_to_pop
							}
						}
						robot_servant = {
							if = {
								limit = { 
									NAND = {
										exists = planet
										planet = {
											exists = owner
											owner = { is_gestalt = yes }
										}
									}
									OR = {
										is_shackled_robot = yes
										is_non_sapient_robot = yes
									}
								}
								set_pop_flag = enable_robot_servant_pop_assign_to_pop
							}
						}
					}
				}
				#enable_allows_alien_leaders
				if = {
					limit = {
						NOT = { is_same_species = owner }
						has_citizenship_rights = yes
					}
					owner = { set_country_flag = enable_allows_alien_leaders }
				}
				#pop jobs
				if = {
					limit = { has_job = clerk }
					set_pop_flag = VOP_job_POP_clerk_has_planet_amenities_add
					if = {
						limit = { planet = {
							exists = orbital_defence
							orbital_defence = {
								exists = starbase
								starbase = { has_starbase_building = ring_trade_hub }
							}
						} }
						set_pop_flag = VOP_job_POP_clerk_has_planet_amenities_add_ring_trade_hub
					}
				}
				if = {
					limit = { battle_thrall_job_check_trigger = yes }
					set_pop_flag = VOP_job_POP_enable_canbe_enforcer_jobs_pop
				}
				if = {
					limit = { entertainer_job_check_trigger = yes }
					set_pop_flag = VOP_job_POP_enable_canbe_entertainer_jobs_pop
				}
				if = {
					limit = { 
						owner = {
							is_fallen_empire = yes
							is_xenophile = yes
						}
						NOT = { is_same_species = owner }
						is_robot_pop = no
						planet = { has_building = building_fe_xeno_zoo }
					}
					set_pop_flag = VOP_job_POP_enable_canbe_fe_xeno_ward_jobs_pop
				}
				if = {
					limit = { 
						owner = {
							is_fallen_empire = yes
							is_fallen_empire_spiritualist = no
							is_fallen_machine_empire = no
						}
						is_same_species = owner
						NOR = {
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
					set_pop_flag = VOP_job_POP_enable_canbe_fe_hedonist_jobs_pop
				}
			}
		}
		# planet events
		every_galaxy_planet = {
			limit = { exists = owner }
			planet_event = { id = crime.41 }
			if = { 
				limit = { owner = { is_ai = yes } } 
				if = {
					limit = { 
						num_pops > 150 
						NOT = { has_modifier = planet_population_control } 
					}
					add_modifier = { modifier = planet_population_control }
				}
				if = {
					limit = { 
						num_pops > 150 
						NOT = { has_modifier = planet_population_control_gestalt } 
					}
					add_modifier = { modifier = planet_population_control_gestalt }
				}
				if = {
					limit = { 
						num_pops > 150 
						NOT = { has_modifier = planet_robot_assembly_control } 
					}
					add_modifier = { modifier = planet_robot_assembly_control }
				}
				else_if = { 
					limit = { 
						num_pops <= 150 
						OR = {
							has_modifier = planet_population_control
							has_modifier =  planet_population_control_gestalt
							has_modifier = planet_robot_assembly_control
						}
					} 
					remove_modifier = planet_population_control
					remove_modifier = planet_population_control_gestalt
					remove_modifier =  planet_robot_assembly_control
				}
			}
			#[POP SECTION CALCULATION]
			if = {
				limit = { 
					num_pops > 0 
					NOT = { has_global_flag = VOP_settings_POP_cate_disable_trigger_modifier }
				}
				remove_modifier = str_trade_pop
				remove_modifier = str_assemble_pop
				remove_modifier = str_assemble_tiyanki_pop
				remove_modifier = str_pop_planet_amenities_add
				remove_modifier = str_pop_non_noxious_happiness_pop
				clear_variable = trade_value_add_op_1_var
				clear_variable = trade_value_add_op_2_var
				clear_variable = trade_value_add_op_3_var
				clear_variable = trade_value_add_op_4_var
				clear_variable = trade_value_add_op_5_var
				clear_variable = trade_value_add_op_6_var
				clear_variable = trade_value_add_op_8_var
				clear_variable = trade_value_add_op_9_var
				clear_variable = trade_value_add_op_10_var
				clear_variable = trade_value_add_op_11_var
				clear_variable = trade_value_add_op_12_var
				clear_variable = trade_value_add_op_13_var
				clear_variable = trade_value_add_op_14_var
				clear_variable = trade_value_add_op_15_var
				clear_variable = clerk_has_planet_amenities_add_var
				clear_variable = clerk_has_planet_amenities_add_ring_trade_hub_var
				every_owned_pop = {
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_1 }
						prev = { change_variable = { which = trade_value_add_op_1_var value = @trade_value_prosperity_gospel } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_2 }
						prev = { change_variable = { which = trade_value_add_op_2_var value = @trade_value_shared_burden } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_3 }
						prev = { change_variable = { which = trade_value_add_op_3_var value = @trade_value_very_high } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_4 }
						prev = { change_variable = { which = trade_value_add_op_4_var value = @trade_value_high } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_5 }
						prev = { change_variable = { which = trade_value_add_op_5_var value = @trade_value_normal } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_6 }
						prev = { change_variable = { which = trade_value_add_op_6_var value = @plantoid_budding_rate } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_8 }
						prev = { change_variable = { which = trade_value_add_op_8_var value = @noxious_happiness_penalty } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_9 }
						prev = { change_variable = { which = trade_value_add_op_9_var value = @trade_value_very_high } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_10 }
						prev = { change_variable = { which = trade_value_add_op_10_var value = @trade_value_high } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_11 }
						prev = { change_variable = { which = trade_value_add_op_11_var value = @trade_value_normal } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_12 }
						prev = { change_variable = { which = trade_value_add_op_12_var value = @trade_value_low } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_13 }
						prev = { change_variable = { which = trade_value_add_op_13_var value = @trade_value_very_high } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_14 }
						prev = { change_variable = { which = trade_value_add_op_14_var value = @tiyanki_budding_rate } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_15 }
						prev = { change_variable = { which = trade_value_add_op_15_var value = @pop_happiness_unemply_rate } }
					}
					if = {
						limit = { has_pop_flag = VOP_job_POP_clerk_has_planet_amenities_add_ring_trade_hub }
						prev = { change_variable = { which = clerk_has_planet_amenities_add_ring_trade_hub_var value = 1 } }
					}
					if = {
						limit = { has_pop_flag = VOP_job_POP_clerk_has_planet_amenities_add }
						prev = { change_variable = { which = clerk_has_planet_amenities_add_var value = 2 } }
					}
				}
				set_variable = { which = trade_value_add_op_total value = 0 }
				set_variable = { which = asseble_value_add_op_total value = 0 }
				set_variable = { which = asseble_tiyanki_value_add_op_total value = 0 }
				set_variable = { which = planet_amenities_add_total value = 0 }
				set_variable = { which = pop_happiness_unemply_op_total value = 0 }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_1_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_2_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_3_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_4_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_5_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_9_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_10_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_11_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_12_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_13_var }
				change_variable = { which = asseble_value_add_op_total value = trade_value_add_op_6_var }
				change_variable = { which = asseble_tiyanki_value_add_op_total value = trade_value_add_op_14_var }
				change_variable = { which = pop_happiness_unemply_op_total value = trade_value_add_op_15_var }
				change_variable = { which = planet_amenities_add_total value = clerk_has_planet_amenities_add_ring_trade_hub_var }
				change_variable = { which = planet_amenities_add_total value = clerk_has_planet_amenities_add_var }
				multiply_variable = { which = planet_amenities_add_total value = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult| }
				add_modifier = { modifier = str_trade_pop multiplier = trade_value_add_op_total }
				add_modifier = { modifier = str_assemble_pop multiplier = asseble_value_add_op_total }
				add_modifier = { modifier = str_assemble_tiyanki_pop multiplier = asseble_tiyanki_value_add_op_total }
				add_modifier = { modifier = str_pop_planet_amenities_add multiplier = planet_amenities_add_total }
				add_modifier = { modifier = str_pop_non_noxious_happiness_pop multiplier = pop_happiness_unemply_op_total }
			}
		}
		#set_update_modifiers_batch = end
	}
}
event = {
	id = vop_ai_fixed.6
	hide_window = yes
	is_triggered_only = yes
	trigger = { 
		NOT = { has_global_flag = VOP_CD_vop_ai_fixed }
		count_playable_country = { count > 0 } 
	}
	immediate = {
		set_global_flag = VOP_MOD_INSTALL
		set_timed_global_flag = { flag = VOP_CD_vop_ai_fixed days = 1 }
		set_update_modifiers_batch = begin
		AOW_eft_GLBL_set_ai_mega_cap_0 = yes
		AOW_eft_GLBL_set_player_mega_cap_1 = yes
		# action.116
		if = {
			limit = {
				years_passed > 50
				has_global_flag = galactic_market_founded
				OR = {
					NOT = { is_on_market = volatile_motes }
					NOT = { is_on_market = exotic_gases }
					NOT = { is_on_market = rare_crystals }
					NOT = { is_on_market = sr_living_metal }
					NOT = { is_on_market = sr_zro }
					NOT = { is_on_market = sr_dark_matter }
				}
			}
			if = {
				limit = {
					NOT = { is_on_market = volatile_motes }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = volatile_motes value >= 1 }
					}
				}
				enable_on_market = volatile_motes
			}
			else_if = {
				limit = {
					NOT = { is_on_market = exotic_gases }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = exotic_gases value >= 1 }
					}
				}
				enable_on_market = exotic_gases
			}
			else_if = {
				limit = {
					NOT = { is_on_market = rare_crystals }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = rare_crystals value >= 1 }
					}
				}
				enable_on_market = rare_crystals
			}
			else_if = {
				limit = {
					NOT = { is_on_market = sr_living_metal }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = sr_living_metal value >= 1 }
					}
				}
				enable_on_market = sr_living_metal
			}
			else_if = {
				limit = {
					NOT = { is_on_market = sr_zro }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = sr_zro value >= 1 }
					}
				}
				enable_on_market = sr_zro
			}
			else_if = {
				limit = {
					NOT = { is_on_market = sr_dark_matter }
					any_playable_country = {
						is_galactic_community_member = yes
						resource_stockpile_compare = { resource = sr_dark_matter value >= 1 }
					}
				}
				enable_on_market = sr_dark_matter
			}
		}
		every_system = {
			remove_star_flag = can_enable_can_be_system_blocks_sensors
			if = {
				limit = { OR = {
					##_|星云|	+RS/Sexp
					is_inside_nebula = yes
					has_modifier = space_storm
					##_|封印星系|	+Sexp
					has_star_flag = lcluster
					has_star_flag = sealed_system
				} }
				set_star_flag = can_enable_can_be_system_blocks_sensors
			}
		}
		# action 90
		if = {
			limit = { 
				any_playable_country = { any_owned_planet = {
					is_controlled_by = PREV
					solar_system = { NOT = { exists = starbase } }
				} }
				any_country = { is_nivirana_battle_country = yes }
			}
			every_system = {
				limit = {
					NOT = { exists = starbase }
					any_system_colony = {
						exists = owner
						has_ground_combat = no
						owner = { OR = {
							is_country_type = default
							is_country_type = fallen_empire
							is_country_type = awakened_fallen_empire
						} }
						solar_system = { NOR = {
							any_fleet_in_system = {
								exists = owner
								owner = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_hostile = prevprevprev.owner
										is_at_war_with = prevprevprev.owner
									}
								}
							}
							any_fleet_in_system = {
								exists = controller
								controller = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_hostile = prevprevprev.owner
										is_at_war_with = prevprevprev.owner
									}
								}
							}
							any_system_colony = {
								exists = owner
								NOT = { is_same_value = prevprev }
								owner = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_country_type = default
										is_country_type = fallen_empire
										is_country_type = awakened_fallen_empire
									}
								}
							}
						} }
					}
				}
				random_system_colony = {
					limit = {
						exists = owner
						has_ground_combat = no
						owner = { OR = {
							is_country_type = default
							is_country_type = fallen_empire
							is_country_type = awakened_fallen_empire
						} }
						solar_system = { NOR = {
							any_fleet_in_system = {
								exists = owner
								owner = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_hostile = prevprevprev.owner
										is_at_war_with = prevprevprev.owner
									}
								}
							}
							any_fleet_in_system = {
								exists = controller
								controller = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_hostile = prevprevprev.owner
										is_at_war_with = prevprevprev.owner
									}
								}
							}
							any_system_colony = {
								exists = owner
								owner = {
									NOT = { is_same_value = prevprevprev.owner }
									OR = {
										is_country_type = default
										is_country_type = fallen_empire
										is_country_type = awakened_fallen_empire
									}
								}
							}
						} }
					}
					planet_event = { id = action.91 }
				}
			}
		}
		# country_event tech
		every_country = {
			# warcb
			remove_country_flag = VOP_cb_CNTR_has_stop_colossus_cb
			remove_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_1
			remove_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_2
			remove_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_3
			remove_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_4
			if = {
				limit = { any_controlled_fleet = {
					is_ship_class = shipclass_military_special
					any_controlled_ship = { is_ship_size = colossus }
				} }
				set_country_flag = VOP_cb_CNTR_has_stop_colossus_cb
			}
			if = {
				limit = { VOP_cb_CNTR_has_total_war_cb_SECTION_1 = yes }
				set_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_1
			}
			if = {
				limit = { VOP_cb_CNTR_has_total_war_cb_SECTION_2 = yes }
				set_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_2
			}
			if = {
				limit = { VOP_cb_CNTR_has_total_war_cb_SECTION_3 = yes }
				set_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_3
			}
			if = {
				limit = { VOP_cb_CNTR_has_total_war_cb_SECTION_4 = yes }
				set_country_flag = VOP_cb_CNTR_has_total_war_cb_SECTION_4
			}
			# enclave 2065
			if = {
				limit = {
					is_country_type = enclave_mercenary
					any_owned_fleet = { is_leased = no }
				}
				country_event = { id = enclave.2070 }
			}
			#SHIP OP
			if = {
				limit = {  
					is_ai = yes 
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
						is_country_type = default
						is_country_type = enclave_mercenary
					}
					OR = {
						any_owned_fleet = { count_owned_ship = { limit = { is_ship_size = frigate } count > 20 } }
						any_owned_fleet = { count_owned_ship = { limit = { is_ship_size = corvette } count > 20 } }
						any_owned_fleet = { count_owned_ship = { limit = { is_ship_size = destroyer } count > 15 } }
						any_owned_fleet = { count_owned_ship = { limit = { is_ship_size = cruiser } count > 10 } }
						any_owned_fleet = { count_owned_ship = { limit = { is_ship_size = small_ship_fallen_empire } count > 10 } }
					}
					OR = {
						has_existing_ship_design = battleship
						has_existing_ship_design = large_ship_fallen_empire
					}
				}
				if = {
					limit = {  
						any_owned_fleet = { count_owned_ship = {
							limit = { is_ship_size = small_ship_fallen_empire }
							count > 10
						} }
						has_existing_ship_design = large_ship_fallen_empire
					}
					every_owned_fleet = {
						limit = { any_owned_ship = { is_ship_size = small_ship_fallen_empire } }
						clear_variable = small_ship_fallen_empire_ai_var
						export_trigger_value_to_variable = {
							trigger = count_owned_ship
							parameters = { limit = { is_ship_size = small_ship_fallen_empire } }
							variable = small_ship_fallen_empire_ai_var
						}
						divide_variable = { which = small_ship_fallen_empire_ai_var value = 10 }
						floor_variable = small_ship_fallen_empire_ai_var
						if = {
							limit = { check_variable = { which = small_ship_fallen_empire_ai_var value < 1 } }
							set_variable = { which = small_ship_fallen_empire_ai_var value = 0 }
						}
						else_if = {
							limit = { check_variable = { which = small_ship_fallen_empire_ai_var value >= 1 } }
							while = {
								count = small_ship_fallen_empire_ai_var
								create_ship = { random_existing_design = large_ship_fallen_empire }
							}
							every_owned_ship = { limit = { is_ship_size = small_ship_fallen_empire } destroy_ship = this }
						}
					}
				}
				if = {
					limit = {  
						any_owned_fleet = { count_owned_ship = {
							limit = { is_ship_size = corvette }
							count > 20
						} }
						has_existing_ship_design = battleship
					}
					every_owned_fleet = {
						limit = { any_owned_ship = { is_ship_size = corvette } }
						clear_variable = corvette_ai_var
						export_trigger_value_to_variable = {
							trigger = count_owned_ship
							parameters = { limit = { is_ship_size = corvette } }
							variable = corvette_ai_var
						}
						divide_variable = { which = corvette_ai_var value = 20 }
						floor_variable = corvette_ai_var
						if = {
							limit = { check_variable = { which = corvette_ai_var value < 1 } }
							set_variable = { which = corvette_ai_var value = 0 }
						}
						else_if = {
							limit = { check_variable = { which = corvette_ai_var value >= 1 } }
							while = {
								count = corvette_ai_var
								create_ship = { random_existing_design = battleship }
							}
							every_owned_ship = { limit = { is_ship_size = corvette } destroy_ship = this }
						}
					}
				}
				if = {
					limit = {  
						any_owned_fleet = { count_owned_ship = {
							limit = { is_ship_size = frigate }
							count > 20
						} }
						has_existing_ship_design = battleship
					}
					every_owned_fleet = {
						limit = { any_owned_ship = { is_ship_size = frigate } }
						clear_variable = frigate_ai_var
						export_trigger_value_to_variable = {
							trigger = count_owned_ship
							parameters = { limit = { is_ship_size = frigate } }
							variable = frigate_ai_var
						}
						divide_variable = { which = frigate_ai_var value = 20 }
						floor_variable = frigate_ai_var
						if = {
							limit = { check_variable = { which = frigate_ai_var value < 1 } }
							set_variable = { which = frigate_ai_var value = 0 }
						}
						else_if = {
							limit = { check_variable = { which = frigate_ai_var value >= 1 } }
							while = {
								count = frigate_ai_var
								create_ship = { random_existing_design = battleship }
							}
							every_owned_ship = { limit = { is_ship_size = frigate } destroy_ship = this }
						}
					}
				}
				if = {
					limit = {  
						any_owned_fleet = { count_owned_ship = {
							limit = { is_ship_size = destroyer }
							count > 15
						} }
						has_existing_ship_design = battleship
					}
					every_owned_fleet = {
						limit = { any_owned_ship = { is_ship_size = destroyer } }
						clear_variable = destroyer_ai_var
						export_trigger_value_to_variable = {
							trigger = count_owned_ship
							parameters = { limit = { is_ship_size = destroyer } }
							variable = destroyer_ai_var
						}
						divide_variable = { which = destroyer_ai_var value = 15 }
						floor_variable = destroyer_ai_var
						if = {
							limit = { check_variable = { which = destroyer_ai_var value < 1 } }
							set_variable = { which = destroyer_ai_var value = 0 }
						}
						else_if = {
							limit = { check_variable = { which = destroyer_ai_var value >= 1 } }
							while = {
								count = destroyer_ai_var
								create_ship = { random_existing_design = battleship }
							}
							every_owned_ship = { limit = { is_ship_size = destroyer } destroy_ship = this }
						}
					}
				}
				if = {
					limit = {  
						any_owned_fleet = { count_owned_ship = {
							limit = { is_ship_size = cruiser }
							count > 10
						} }
						has_existing_ship_design = battleship
					}
					every_owned_fleet = {
						limit = { any_owned_ship = { is_ship_size = cruiser } }
						clear_variable = cruiser_ai_var
						export_trigger_value_to_variable = {
							trigger = count_owned_ship
							parameters = { limit = { is_ship_size = cruiser } }
							variable = cruiser_ai_var
						}
						divide_variable = { which = cruiser_ai_var value = 10 }
						floor_variable = cruiser_ai_var
						if = {
							limit = { check_variable = { which = cruiser_ai_var value < 1 } }
							set_variable = { which = cruiser_ai_var value = 0 }
						}
						else_if = {
							limit = { check_variable = { which = cruiser_ai_var value >= 1 } }
							while = {
								count = cruiser_ai_var
								create_ship = { random_existing_design = battleship }
							}
							every_owned_ship = { limit = { is_ship_size = cruiser } destroy_ship = this }
						}
					}
				}
			}
			#TECH OP
			if = {
				limit = { OR = { 
					NOT = { has_ethic = ethic_gestalt_consciousness }
					is_active_resolution = resolution_galacticstudies_extradimensional_experimentation
					has_relic = r_zro_crystal
				} }
				remove_country_flag = pop_has_trait_psionic
				remove_country_flag = pop_has_trait_latent_psionic
				if = {
					limit = { any_owned_pop = {
						pop_has_trait = trait_psionic
					} }
					set_country_flag = pop_has_trait_psionic
				}
				if = {
					limit = { any_owned_pop = {
						pop_has_trait = trait_latent_psionic
					} }
					set_country_flag = pop_has_trait_latent_psionic
				}
			}
			if = {
				limit = { is_regular_empire = yes }
				remove_country_flag = is_enslaved_var_more_than_9
				remove_country_flag = is_enslaved_var_more_than_19
				remove_country_flag = is_enslaved_var_more_than_29
				remove_country_flag = is_enslaved_var_more_than_initial
				if = {
					limit = { count_owned_pop = {
						limit = { is_enslaved = yes }
						count > 29
					} }
					set_country_flag = is_enslaved_var_more_than_29
					set_country_flag = is_enslaved_var_more_than_19
					set_country_flag = is_enslaved_var_more_than_9
				}
				else_if = {
					limit = { count_owned_pop = {
						limit = { is_enslaved = yes }
						count > 19
					} }
					set_country_flag = is_enslaved_var_more_than_19
					set_country_flag = is_enslaved_var_more_than_9
				}
				else_if = {
					limit = { count_owned_pop = {
						limit = { is_enslaved = yes }
						count > 9
					} }
					set_country_flag = is_enslaved_var_more_than_9
				}
				if = {
					limit = { OR = {
						allows_slavery = no
						NOT = { any_owned_pop = { is_enslaved = yes } }
					} }
					set_country_flag = is_enslaved_var_more_than_initial
				}
			}
		}
		# pop events
		every_galaxy_pop = {
			species = {
				remove_species_flag = can_enable_species_has_happiness
				remove_species_flag = can_enable_should_force_decline_species
				remove_species_flag = can_has_food_upkeep
			}
			remove_pop_flag = can_enable_pop_election_vote
			remove_pop_flag = can_enable_pop_has_random_ethics
			remove_pop_flag = can_enable_can_generate_military_leader_from_pop
			remove_pop_flag = can_enable_can_generate_leader_from_pop
			#speces [GAME RULE]
			species = { 
				if = {
					limit = { can_have_food_upkeep_species = yes }
					set_species_flag = can_has_food_upkeep
				} 
				#happiniess species
				if = {
					limit = { NOR = {
						has_trait = trait_machine_unit
						has_trait = trait_hive_mind
						can_think = no
						AND = {
							has_trait = trait_mechanical
							OR = {
								NOT = { exists = owner }
								owner = { has_authority = auth_machine_intelligence }
								owner = { NOT = { has_technology = tech_synthetic_workers } }
								owner = { has_policy_flag = ai_outlawed }
							}
						}
						AND = {
							has_trait = trait_cybernetic
							exists = owner
							owner = {
								has_authority = auth_machine_intelligence
								has_civic = civic_machine_assimilator # Assimilator empire
							}
						}
					} }
					set_species_flag = can_enable_species_has_happiness
				}
				# should_force_decline_species
				if = {
					limit = {
						OR = {
							has_trait = trait_clone_soldier_infertile
							has_trait = trait_clone_soldier_infertile_full_potential
						}
						prev.planet = {
							OR = {
								# Check if country is unable to build Vats for this species.
								AND = {
									exists = owner
									owner = {
										OR = {
											NOT = { has_origin = origin_clone_army }					# Can't have Vats.
											has_country_flag = clone_army_fertility_unlocked			# Can't have Vats anymore.
											NOT = { owner_main_species = { is_same_species = prevprevprev } }	# Our Vats can't build this species.
										}
									}
								}
								# Vats check out, but are there more pops than Vats support?
								check_variable = { which = clone_pops_missing value < 0 }
							}
						}
					}
					set_species_flag = can_enable_should_force_decline_species
				}
			}
			#canpopvote [GAME RULE]
			if = {
				limit = { 
					has_citizenship_rights = yes
					is_sapient = yes
					is_enslaved = no
					is_being_purged = no
				}
				set_pop_flag = can_enable_pop_election_vote
			}
			#pop_has_random_ethics [GAME RULE]
			if = {
				limit = { NOT = { has_citizenship_type = { country = owner type = citizenship_organic_trophy } } }
				set_pop_flag = can_enable_pop_has_random_ethics
			}
			#can_generate_military_leader_from_pop [GAME RULE]
			if = {
				limit = {  
					can_be_military_leader = yes
					OR = {
						is_robot_pop = no
						AND = {
							exists = owner
							owner = {
								OR = {
									has_technology = tech_synthetic_leaders
									has_authority = auth_machine_intelligence
									is_mechanical_empire = yes
								}
							}
						}
					}
					OR = {
						is_same_species = owner
						owner = {
							NAND = {
								has_origin = origin_necrophage
								has_trait = trait_necrophage
							}
						}
					}
				}
				set_pop_flag = can_enable_can_generate_military_leader_from_pop
			}
			#can_generate_leader_from_pop [GAME RULE]
			if = {
				limit = { 
					has_citizenship_rights = yes
					NOT = { has_trait = trait_syncretic_proles }
					can_think = yes
					OR = {
						is_robot_pop = no
						owner = {
							OR = {
								has_technology = tech_synthetic_leaders
								has_authority = auth_machine_intelligence
								is_mechanical_empire = yes
							}
						}
					}
					OR = {
						is_same_species = owner
						owner = {
							NAND = {
								has_origin = origin_necrophage
								has_trait = trait_necrophage
							}
						}
					}
				}
				set_pop_flag = can_enable_can_generate_leader_from_pop
			}
			#[POP SECTION]
			if = {
				limit = { exists = owner }
				remove_pop_flag = enable_purge_pop_assign_to_pop
				remove_pop_flag = enable_robot_servant_pop_assign_to_pop
				remove_pop_flag = enable_precursor_pop_assign_to_pop
				remove_pop_flag = enable_work_pop_assign_to_pop
				remove_pop_flag = enable_simple_drone_assign_to_pop
				remove_pop_flag = enable_bio_trophy_pop_assign_to_pop
				remove_pop_flag = enable_should_apply_unemployment_penalties_op
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_1
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_2
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_3
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_4
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_5
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_6
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_7
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_8
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_9
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_10
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_11
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_12
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_13
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_14
				remove_pop_flag = VOP_catgory_POP_trade_value_add_op_15
				remove_pop_flag = VOP_job_POP_clerk_has_planet_amenities_add
				remove_pop_flag = VOP_job_POP_clerk_has_planet_amenities_add_ring_trade_hub
				remove_pop_flag = VOP_job_POP_enable_canbe_enforcer_jobs_pop
				remove_pop_flag = VOP_job_POP_enable_canbe_entertainer_jobs_pop
				remove_pop_flag = VOP_job_POP_enable_canbe_fe_xeno_ward_jobs_pop
				remove_pop_flag = VOP_job_POP_enable_canbe_fe_hedonist_jobs_pop
				remove_pop_flag = VOP_livestanderd_POP_exotic_metabolism_op_1
				remove_pop_flag = VOP_livestanderd_POP_has_food_upkeep_op_1
				remove_pop_flag = VOP_livestanderd_POP_has_food_upkeep_op_2
				remove_pop_flag = VOP_livestanderd_POP_has_minerals_upkeep_op_1
				remove_pop_flag = VOP_livestanderd_POP_has_minerals_upkeep_op_2
				remove_pop_flag = VOP_livestanderd_POP_has_phototrophic_energy_upkeep_op
				remove_pop_flag = VOP_livestanderd_POP_has_energy_upkeep_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_efficient_processors_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_logic_engines_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_loyalty_circuits_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_double_jointed_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_enhanced_memory_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_durable_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_learning_algorithms_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_trading_algorithms_op
				remove_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_streamlined_protocols_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_consumer_goods_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_alloys_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_unity_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_gas_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_crystal_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_motes_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_zro_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_dark_matter_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_living_metal_op
				remove_pop_flag = VOP_livestanderd_POP_instrument_craving_nanites_op
				remove_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_1
				remove_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_2
				remove_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_3
				remove_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_4
				remove_pop_flag = VOP_livestanderd_POP_living_standard_normal_1
				remove_pop_flag = VOP_livestanderd_POP_living_standard_normal_2
				owner = { remove_country_flag = enable_allows_alien_leaders }
				#speceis_right
				if = {
					limit = { 
						NAND = {
							exists = owner
							owner = { has_deficit = consumer_goods }
						}
					}
					set_pop_flag = VOP_livestanderd_POP_living_standard_normal_1
				}
				if = {
					limit = { 
						is_unemployed = yes
					}
					set_pop_flag = VOP_livestanderd_POP_living_standard_normal_2
				}
				#resource [Pop category]
				if = {
					limit = { NOT = { has_global_flag = VOP_settings_POP_cate_disable_resource } }
					if = {
						limit = { 
							is_organic_species = yes
							has_trait = trait_exotic_metabolism
						}
						set_pop_flag = VOP_livestanderd_POP_exotic_metabolism_op_1
					}
					if = {
						limit = { 
							has_food_upkeep = yes
							is_phototrophic = no
						}
						set_pop_flag = VOP_livestanderd_POP_has_food_upkeep_op_1
					}
					if = {
						limit = { 
							has_food_upkeep = yes
							is_phototrophic = yes
						}
						set_pop_flag = VOP_livestanderd_POP_has_food_upkeep_op_2
					}
					if = {
						limit = { 
							has_mineral_upkeep = yes
							is_phototrophic = no
						}
						set_pop_flag = VOP_livestanderd_POP_has_minerals_upkeep_op_1
					}
					if = {
						limit = { 
							has_mineral_upkeep = yes
							is_phototrophic = yes
						}
						set_pop_flag = VOP_livestanderd_POP_has_minerals_upkeep_op_2
					}
					if = {
						limit = { 
							has_phototrophic_energy_upkeep = yes
						}
						set_pop_flag = VOP_livestanderd_POP_has_phototrophic_energy_upkeep_op
					}
					if = {
						limit = { 
							has_energy_upkeep = yes
						}
						set_pop_flag = VOP_livestanderd_POP_has_energy_upkeep_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_efficient_processors
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_efficient_processors_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_logic_engines
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_logic_engines_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_loyalty_circuits
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_loyalty_circuits_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_double_jointed
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_double_jointed_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_enhanced_memory
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_enhanced_memory_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_durable
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_durable_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_learning_algorithms
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_learning_algorithms_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_trading_algorithms
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_trading_algorithms_op
					}
					if = {
						limit = { 
							has_trait = trait_cyborg_streamlined_protocols
						}
						set_pop_flag = VOP_livestanderd_POP_has_trait_cyborg_streamlined_protocols_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_consumer_goods
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_consumer_goods_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_alloys
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_alloys_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_unity
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_unity_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_gas
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_gas_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_crystal
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_crystal_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_motes
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_motes_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_zro
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_zro_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_dark_matter
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_dark_matter_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_living_metal
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_living_metal_op
					}
					if = {
						limit = { 
							has_trait = trait_psionic
							owner = {
								has_country_flag = instrument_craving_nanites
							}
						}
						set_pop_flag = VOP_livestanderd_POP_instrument_craving_nanites_op
					}
					if = {
						limit = { 
							OR = {
								has_trait = trait_lithoid_scintillating
								has_trait = trait_advanced_scintillating
							}
						}
						set_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_1
					}
					if = {
						limit = { 
							OR = {
								has_trait = trait_lithoid_gaseous_byproducts
								has_trait = trait_advanced_gaseous_byproducts
							}
						}
						set_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_2
					}
					if = {
						limit = { 
							OR = {
								has_trait = trait_lithoid_volatile_excretions
								has_trait = trait_advanced_volatile_excretions
							}
						}
						set_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_3
					}
					if = {
						limit = { 
							OR = {
								has_trait = trait_notofthisworld
								has_trait = trait_robot_notofthisworld
							}
						}
						set_pop_flag = VOP_livestanderd_POP_lithoid_trait_resource_production_4
					}
				}
				#trigger_modifier [Pop category]
				if = {
					limit = { NOT = { has_global_flag = VOP_settings_POP_cate_disable_trigger_modifier } }
					switch = {
						trigger = has_job_category
						ruler = {
							if = {
								limit = { 
									NOR = {
										has_very_high_living_standard_type = yes
										has_high_living_standard_type = yes
										has_shared_burden_living_standard_type = yes
									}
								}
								set_pop_flag = enable_should_apply_unemployment_penalties_op
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									OR = {
										has_academic_living_standard_type = yes
										has_very_high_living_standard_type = yes
										has_high_living_standard_type = yes
										has_normal_living_standard_type = yes
										has_stratified_living_standard_type = yes
										has_decadent_living_standard_type = yes
									}
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_13
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									prosperity_gospel_check_trigger = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_1
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_shared_burden_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_2
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_low_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_5
							}
							if = {
								limit = { can_assemble_budding_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_6
							}
							if = {
								limit = { can_assemble_tiyanki_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_14
							}
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
							if = {
								limit = {
									has_global_flag = galactic_community_resolution_divinity_comfort_the_fallen
									is_unemployed = yes
									has_pop_flag = enable_should_apply_unemployment_penalties_op
									exists = owner
									owner = { is_galactic_community_member = yes }
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_15
							}
						}
						specialist = {
							if = {
								limit = { 
									NOR = {
										has_very_high_living_standard_type = yes
										has_high_living_standard_type = yes
										has_shared_burden_living_standard_type = yes
									}
								}
								set_pop_flag = enable_should_apply_unemployment_penalties_op
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									OR = {
										has_academic_living_standard_type = yes
										has_very_high_living_standard_type = yes
										has_decadent_living_standard_type = yes
									}
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_3
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									OR = {
										has_high_living_standard_type = yes
										has_normal_living_standard_type = yes
										has_stratified_living_standard_type = yes
									}
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_4
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									prosperity_gospel_check_trigger = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_1
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_shared_burden_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_2
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_low_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_5
							}
							if = {
								limit = { can_assemble_budding_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_6
							}
							if = {
								limit = { can_assemble_tiyanki_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_14
							}
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
							if = {
								limit = {
									has_global_flag = galactic_community_resolution_divinity_comfort_the_fallen
									is_unemployed = yes
									has_pop_flag = enable_should_apply_unemployment_penalties_op
									exists = owner
									owner = { is_galactic_community_member = yes }
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_15
							}
						}
						worker = {
							if = {
								limit = { 
									exists = owner
									owner = { is_gestalt = no }
								}
								set_pop_flag = enable_work_pop_assign_to_pop
							}
							if = {
								limit = { 
									NOR = {
										has_very_high_living_standard_type = yes
										has_high_living_standard_type = yes
										has_shared_burden_living_standard_type = yes
									}
								}
								set_pop_flag = enable_should_apply_unemployment_penalties_op
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									OR = {
										has_decadent_living_standard_type = yes
										has_very_high_living_standard_type = yes
									}
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_9
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_high_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_10
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									OR = {
										has_normal_living_standard_type = yes
										has_academic_living_standard_type = yes
									}
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_11
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_stratified_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_12
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									prosperity_gospel_check_trigger = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_1
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_shared_burden_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_2
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_low_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_5
							}
							if = {
								limit = { can_assemble_budding_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_6
							}
							if = {
								limit = { can_assemble_tiyanki_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_14
							}
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
							if = {
								limit = {
									has_global_flag = galactic_community_resolution_divinity_comfort_the_fallen
									is_unemployed = yes
									has_pop_flag = enable_should_apply_unemployment_penalties_op
									exists = owner
									owner = { is_galactic_community_member = yes }
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_15
							}
						}
						complex_drone = {
							if = {
								limit = { can_assemble_budding_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_6
							}
							if = {
								limit = { can_assemble_tiyanki_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_14
							}
						}
						simple_drone = {
							if = {
								limit = { 
									exists = owner
									owner = { is_gestalt = yes }
								}
								set_pop_flag = enable_simple_drone_assign_to_pop
							}
							if = {
								limit = { can_assemble_budding_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_6
							}
							if = {
								limit = { can_assemble_tiyanki_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_14
							}
						}
						deviant_drone = {
							if = {
								limit = { 
									NOR = {
										has_very_high_living_standard_type = yes
										has_high_living_standard_type = yes
									}
								}
								set_pop_flag = enable_should_apply_unemployment_penalties_op
							}
						}
						corrupt_drone = {
							if = {
								limit = { 
									NOR = {
										has_very_high_living_standard_type = yes
										has_high_living_standard_type = yes
									}
								}
								set_pop_flag = enable_should_apply_unemployment_penalties_op
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_low_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_5
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_shared_burden_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_2
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									OR = {
										has_normal_living_standard_type = yes
										has_academic_living_standard_type = yes
									}
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_11
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_high_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_10
							}
						}
						slave = {
							if = {
								limit = { can_assemble_budding_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_6
							}
							if = {
								limit = { can_assemble_tiyanki_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_14
							}
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
						}
						bio_trophy = {
							if = {
								limit = { 
									exists = owner
									has_citizenship_type = { type = citizenship_organic_trophy country = owner }
								}
								set_pop_flag = enable_bio_trophy_pop_assign_to_pop
							}
							if = {
								limit = { can_assemble_budding_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_6
							}
							if = {
								limit = { can_assemble_tiyanki_pop = yes }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_14
							}
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
							if = {
								limit = {
									has_global_flag = galactic_community_resolution_divinity_comfort_the_fallen
									is_unemployed = yes
									has_pop_flag = enable_should_apply_unemployment_penalties_op
									exists = owner
									owner = { is_galactic_community_member = yes }
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_15
							}
						}
						pre_sapients = {
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
						}
						xeno_ward = {
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
						}
						criminal = {
							if = {
								limit = { 
									NOR = {
										has_very_high_living_standard_type = yes
										has_high_living_standard_type = yes
									}
								}
								set_pop_flag = enable_should_apply_unemployment_penalties_op
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_low_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_5
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_shared_burden_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_2
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									OR = {
										has_normal_living_standard_type = yes
										has_academic_living_standard_type = yes
									}
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_11
							}
							if = {
								limit = { 
									can_generate_trade_value = yes
									has_high_living_standard_type = yes
								}
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_10
							}
							if = {
								limit = { NOT = { has_trait = trait_noxious } }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_7
							}
							if = {
								limit = { has_trait = trait_noxious }
								set_pop_flag = VOP_catgory_POP_trade_value_add_op_8
							}
						}
						purge = {
							if = {
								limit = { OR = {
									is_being_purged = yes
									has_pop_flag = event_purge
									AND = { # controlled by crisis
										exists = planet
										planet = {
											exists = controller
											controller = {
												OR = {
													is_country_type = ai_empire
													is_country_type = swarm
												}
											}
										}
										OR = { # contingency won't purge itself
											NOT = { exists = event_target:custodian_bot }
											AND = {
												exists = event_target:custodian_bot
												NOT = { species = { is_same_value = event_target:custodian_bot } }
											}
										}
									}
								} }
								set_pop_flag = enable_purge_pop_assign_to_pop
							}
						}
						precursor = {
							if = {
								limit = { 
									exists = owner
									owner = {
										OR = {
											is_country_type = fallen_empire
											is_country_type = awakened_fallen_empire
										}
									}
									OR = {
										is_same_species = owner
										owner = {
											is_fallen_empire_spiritualist = yes
										}
									}
								}
								set_pop_flag = enable_precursor_pop_assign_to_pop
							}
						}
						robot_servant = {
							if = {
								limit = { 
									NAND = {
										exists = planet
										planet = {
											exists = owner
											owner = { is_gestalt = yes }
										}
									}
									OR = {
										is_shackled_robot = yes
										is_non_sapient_robot = yes
									}
								}
								set_pop_flag = enable_robot_servant_pop_assign_to_pop
							}
						}
					}
				}
				#enable_allows_alien_leaders
				if = {
					limit = {
						NOT = { is_same_species = owner }
						has_citizenship_rights = yes
					}
					owner = { set_country_flag = enable_allows_alien_leaders }
				}
				#pop jobs
				if = {
					limit = { has_job = clerk }
					set_pop_flag = VOP_job_POP_clerk_has_planet_amenities_add
					if = {
						limit = { planet = {
							exists = orbital_defence
							orbital_defence = {
								exists = starbase
								starbase = { has_starbase_building = ring_trade_hub }
							}
						} }
						set_pop_flag = VOP_job_POP_clerk_has_planet_amenities_add_ring_trade_hub
					}
				}
				if = {
					limit = { battle_thrall_job_check_trigger = yes }
					set_pop_flag = VOP_job_POP_enable_canbe_enforcer_jobs_pop
				}
				if = {
					limit = { entertainer_job_check_trigger = yes }
					set_pop_flag = VOP_job_POP_enable_canbe_entertainer_jobs_pop
				}
				if = {
					limit = { 
						owner = {
							is_fallen_empire = yes
							is_xenophile = yes
						}
						NOT = { is_same_species = owner }
						is_robot_pop = no
						planet = { has_building = building_fe_xeno_zoo }
					}
					set_pop_flag = VOP_job_POP_enable_canbe_fe_xeno_ward_jobs_pop
				}
				if = {
					limit = { 
						owner = {
							is_fallen_empire = yes
							is_fallen_empire_spiritualist = no
							is_fallen_machine_empire = no
						}
						is_same_species = owner
						NOR = {
							has_trait = trait_mechanical
							has_trait = trait_machine_unit
						}
					}
					set_pop_flag = VOP_job_POP_enable_canbe_fe_hedonist_jobs_pop
				}
			}
		}
		# planet events
		every_galaxy_planet = {
			limit = { exists = owner }
			planet_event = { id = crime.41 }
			if = { 
				limit = { owner = { is_ai = yes } } 
				if = {
					limit = { 
						num_pops > 150 
						NOT = { has_modifier = planet_population_control } 
					}
					add_modifier = { modifier = planet_population_control }
				}
				if = {
					limit = { 
						num_pops > 150 
						NOT = { has_modifier = planet_population_control_gestalt } 
					}
					add_modifier = { modifier = planet_population_control_gestalt }
				}
				if = {
					limit = { 
						num_pops > 150 
						NOT = { has_modifier = planet_robot_assembly_control } 
					}
					add_modifier = { modifier = planet_robot_assembly_control }
				}
				else_if = { 
					limit = { 
						num_pops <= 150 
						OR = {
							has_modifier = planet_population_control
							has_modifier =  planet_population_control_gestalt
							has_modifier = planet_robot_assembly_control
						}
					} 
					remove_modifier = planet_population_control
					remove_modifier = planet_population_control_gestalt
					remove_modifier =  planet_robot_assembly_control
				}
			}
			#[POP SECTION CALCULATION]
			if = {
				limit = { 
					num_pops > 0 
					NOT = { has_global_flag = VOP_settings_POP_cate_disable_trigger_modifier }
				}
				remove_modifier = str_trade_pop
				remove_modifier = str_assemble_pop
				remove_modifier = str_assemble_tiyanki_pop
				remove_modifier = str_pop_planet_amenities_add
				remove_modifier = str_pop_non_noxious_happiness_pop
				clear_variable = trade_value_add_op_1_var
				clear_variable = trade_value_add_op_2_var
				clear_variable = trade_value_add_op_3_var
				clear_variable = trade_value_add_op_4_var
				clear_variable = trade_value_add_op_5_var
				clear_variable = trade_value_add_op_6_var
				clear_variable = trade_value_add_op_8_var
				clear_variable = trade_value_add_op_9_var
				clear_variable = trade_value_add_op_10_var
				clear_variable = trade_value_add_op_11_var
				clear_variable = trade_value_add_op_12_var
				clear_variable = trade_value_add_op_13_var
				clear_variable = trade_value_add_op_14_var
				clear_variable = trade_value_add_op_15_var
				clear_variable = clerk_has_planet_amenities_add_var
				clear_variable = clerk_has_planet_amenities_add_ring_trade_hub_var
				every_owned_pop = {
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_1 }
						prev = { change_variable = { which = trade_value_add_op_1_var value = @trade_value_prosperity_gospel } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_2 }
						prev = { change_variable = { which = trade_value_add_op_2_var value = @trade_value_shared_burden } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_3 }
						prev = { change_variable = { which = trade_value_add_op_3_var value = @trade_value_very_high } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_4 }
						prev = { change_variable = { which = trade_value_add_op_4_var value = @trade_value_high } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_5 }
						prev = { change_variable = { which = trade_value_add_op_5_var value = @trade_value_normal } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_6 }
						prev = { change_variable = { which = trade_value_add_op_6_var value = @plantoid_budding_rate } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_8 }
						prev = { change_variable = { which = trade_value_add_op_8_var value = @noxious_happiness_penalty } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_9 }
						prev = { change_variable = { which = trade_value_add_op_9_var value = @trade_value_very_high } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_10 }
						prev = { change_variable = { which = trade_value_add_op_10_var value = @trade_value_high } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_11 }
						prev = { change_variable = { which = trade_value_add_op_11_var value = @trade_value_normal } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_12 }
						prev = { change_variable = { which = trade_value_add_op_12_var value = @trade_value_low } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_13 }
						prev = { change_variable = { which = trade_value_add_op_13_var value = @trade_value_very_high } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_14 }
						prev = { change_variable = { which = trade_value_add_op_14_var value = @tiyanki_budding_rate } }
					}
					if = {
						limit = { has_pop_flag = VOP_catgory_POP_trade_value_add_op_15 }
						prev = { change_variable = { which = trade_value_add_op_15_var value = @pop_happiness_unemply_rate } }
					}
					if = {
						limit = { has_pop_flag = VOP_job_POP_clerk_has_planet_amenities_add_ring_trade_hub }
						prev = { change_variable = { which = clerk_has_planet_amenities_add_ring_trade_hub_var value = 1 } }
					}
					if = {
						limit = { has_pop_flag = VOP_job_POP_clerk_has_planet_amenities_add }
						prev = { change_variable = { which = clerk_has_planet_amenities_add_var value = 2 } }
					}
				}
				set_variable = { which = trade_value_add_op_total value = 0 }
				set_variable = { which = asseble_value_add_op_total value = 0 }
				set_variable = { which = asseble_tiyanki_value_add_op_total value = 0 }
				set_variable = { which = planet_amenities_add_total value = 0 }
				set_variable = { which = pop_happiness_unemply_op_total value = 0 }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_1_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_2_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_3_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_4_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_5_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_9_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_10_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_11_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_12_var }
				change_variable = { which = trade_value_add_op_total value = trade_value_add_op_13_var }
				change_variable = { which = asseble_value_add_op_total value = trade_value_add_op_6_var }
				change_variable = { which = asseble_tiyanki_value_add_op_total value = trade_value_add_op_14_var }
				change_variable = { which = pop_happiness_unemply_op_total value = trade_value_add_op_15_var }
				change_variable = { which = planet_amenities_add_total value = clerk_has_planet_amenities_add_ring_trade_hub_var }
				change_variable = { which = planet_amenities_add_total value = clerk_has_planet_amenities_add_var }
				multiply_variable = { which = planet_amenities_add_total value = value:scripted_modifier_mult|MODIFIER|pop_job_amenities_mult| }
				add_modifier = { modifier = str_trade_pop multiplier = trade_value_add_op_total }
				add_modifier = { modifier = str_assemble_pop multiplier = asseble_value_add_op_total }
				add_modifier = { modifier = str_assemble_tiyanki_pop multiplier = asseble_tiyanki_value_add_op_total }
				add_modifier = { modifier = str_pop_planet_amenities_add multiplier = planet_amenities_add_total }
				add_modifier = { modifier = str_pop_non_noxious_happiness_pop multiplier = pop_happiness_unemply_op_total }
			}
		}
		set_update_modifiers_batch = end
	}
}

country_event = {
	id = vop_ai_fixed.23
	hide_window = yes
	is_triggered_only = yes

	trigger = { is_ai = yes }

	immediate = {
		if = {
			limit = { NOT = { is_variable_set = TT_var_ascension_breakthrough_times } }
			set_variable = { which = TT_var_ascension_breakthrough_times value = 1 }
		}
		else_if = {
			limit = {
				is_variable_set = TT_var_ascension_breakthrough_times
				resource_stockpile_compare = {
					resource = unity
					value >= 25000
					mult = TT_var_ascension_breakthrough_times
				}
			}
			add_resource = {
				unity = -5000
				mult = TT_var_ascension_breakthrough_times
			}
			remove_modifier = TT_mod_ascension_breakthrough
			remove_modifier = TT_mod_ascension_breakthrough_EACI
			if = {#原版加凝聚力
				limit = { NOT = { has_global_flag = cultural_overhaul_active } }
				add_modifier = {
					modifier = TT_mod_ascension_breakthrough
					multiplier = TT_var_ascension_breakthrough_times
					days = -1
				}
			}
			else_if = {#无限思潮mod加行政管理
				limit = { has_global_flag = cultural_overhaul_active }
				add_modifier = {
					modifier = TT_mod_ascension_breakthrough_EACI
					multiplier = TT_var_ascension_breakthrough_times
					days = -1
				}
			}
			change_variable = { which = TT_var_ascension_breakthrough_times value = 1 }
		}
	}
}
event = {
	id = vop_ai_fixed.24
	hide_window = yes
	is_triggered_only = yes
	trigger = { 
		has_global_flag = AAR_installed 
		NOT = { has_global_flag = AAR_installed_stand }
	}
	immediate = { 
		set_global_flag = AAR_installed_stand 
		AOW_eft_GLBL_set_ai_mega_cap_0 = yes
		AOW_eft_GLBL_set_player_mega_cap_1 = yes
	}
}
planet_event = {
	id = vop_ai_fixed.25
	hide_window = yes
	is_triggered_only = yes
	trigger = { any_country = { NOT = { has_modifier = str_ground_battle } } }
	immediate = { every_country = { limit = { NOT = { has_modifier = str_ground_battle } } add_modifier = { modifier = str_ground_battle } } }
}
country_event = {
	id = vop_ai_fixed.26
	hide_window = yes
	is_triggered_only = yes
	trigger = { 
		is_ai = yes 
		NOT = { has_country_flag = has_str_ai_modifier } 
	}
	immediate = { 
		add_modifier = { modifier = str_ai_modifier } 
		set_country_flag = has_str_ai_modifier 
	}
}