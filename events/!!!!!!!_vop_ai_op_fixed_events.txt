################################
#
# Origin Events
# Written and Modded by Eddy
#
###############################
namespace = vop_ai_fixed
@noxious_happiness_penalty = -0.01
@pop_happiness_unemply_rate = 0.10

event = {
	id = vop_ai_fixed.1
	hide_window = yes
	is_triggered_only = yes
	trigger = { always = yes }
	immediate = { 
		set_global_flag = VOP_MOD_INSTALL
		#set_global_flag = force_disable_aow_megastructure
		set_global_flag = force_adjust_aow_megastructure_cap
		set_global_flag = VOP_flg_glbl_AP_no_ai
		vop_optimaze_action_116 = yes # action.116
		vop_optimaze_game_rule_system_sensor = yes #sensor gamerule
		every_country = {
			vop_optimaze_war_goals = yes # warcb
			vop_optimaze_enclave_2065 = yes # enclave 2065
			every_owned_pop_group = {
				vop_optimaze_game_rule_can_vote_in_democratic_election = yes
				#vop_optimaze_game_rule_pop_has_random_ethics = yes
				vop_optimaze_game_rule_can_generate_leader_from_pop = yes
			}
			if = {
				limit = { NOT = { has_modifier = pop_unemployment_demotion_time_mult } }
				add_modifier = { modifier = pop_unemployment_demotion_time_mult multiplier = -1 }
			}
		}
		every_galaxy_species = {
			vop_optimaze_game_rule_can_is_phototrophic = yes
			vop_optimaze_game_rule_can_has_food_upkeep = yes
			vop_optimaze_game_rule_can_has_mineral_upkeep = yes
			vop_optimaze_game_rule_can_has_energy_upkeep = yes
			vop_optimaze_game_rule_can_has_phototrophic_energy_upkeep = yes
		}
		every_galaxy_planet = {
			limit = { is_colony = yes }
			vop_optimaze_game_rule_is_new_colony = yes
		}
		every_galaxy_fleet = {
			limit = {
				exists = owner
				owner = { is_ai = yes }
				any_owned_ship = { is_ship_size = military_station_small }
			}
			every_owned_ship = {
				limit = { is_ship_size = military_station_small }
				destroy_ship = this
			}
		}
	}
}

event = {
	id = vop_ai_fixed.5
	hide_window = yes
	is_triggered_only = yes
	trigger = { 
		NOT = { has_global_flag = VOP_CD_vop_ai_fixed }
		count_playable_country = { count > 0 } 
	}
	immediate = {
		set_global_flag = VOP_flg_glbl_AP_no_ai
		set_timed_global_flag = { flag = VOP_CD_vop_ai_fixed days = 1 }
		vop_optimaze_action_116 = yes # action.116
		vop_optimaze_game_rule_system_sensor = yes #sensor gamerule
		# country_event tech
		every_country = {
			vop_optimaze_war_goals = yes # warcb
			vop_optimaze_enclave_2065 = yes # enclave 2065
			every_owned_pop_group = {
				vop_optimaze_game_rule_can_vote_in_democratic_election = yes
				#vop_optimaze_game_rule_pop_has_random_ethics = yes
				vop_optimaze_game_rule_can_generate_leader_from_pop = yes
			}
			if = {
				limit = { NOT = { has_modifier = pop_unemployment_demotion_time_mult } }
				add_modifier = { modifier = pop_unemployment_demotion_time_mult multiplier = -1 }
			}
		}
		every_galaxy_species = {
			vop_optimaze_game_rule_can_is_phototrophic = yes
			vop_optimaze_game_rule_can_has_food_upkeep = yes
			vop_optimaze_game_rule_can_has_mineral_upkeep = yes
			vop_optimaze_game_rule_can_has_energy_upkeep = yes
			vop_optimaze_game_rule_can_has_phototrophic_energy_upkeep = yes
		}
		every_galaxy_planet = {
			limit = { is_colony = yes }
			vop_optimaze_game_rule_is_new_colony = yes
		}
	}
}

country_event = {
	id = vop_ai_fixed.6
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = this }
	immediate = {
		set_global_flag = VOP_flg_glbl_AP_no_ai
		vop_optimaze_action_116 = yes # action.116
		vop_optimaze_game_rule_system_sensor = yes #sensor gamerule
		# country_event tech
		vop_optimaze_war_goals = yes # warcb
		vop_optimaze_enclave_2065 = yes # enclave 2065
		every_owned_pop_group = {
			vop_optimaze_game_rule_can_vote_in_democratic_election = yes
			#vop_optimaze_game_rule_pop_has_random_ethics = yes
			vop_optimaze_game_rule_can_generate_leader_from_pop = yes
		}
		if = {
			limit = { NOT = { has_modifier = pop_unemployment_demotion_time_mult } }
			add_modifier = { modifier = pop_unemployment_demotion_time_mult multiplier = -1 }
		}
		every_owned_species = {
			vop_optimaze_game_rule_can_is_phototrophic = yes
			vop_optimaze_game_rule_can_has_food_upkeep = yes
			vop_optimaze_game_rule_can_has_mineral_upkeep = yes
			vop_optimaze_game_rule_can_has_energy_upkeep = yes
			vop_optimaze_game_rule_can_has_phototrophic_energy_upkeep = yes
		}
		every_owned_planet = {
			limit = { is_colony = yes }
			vop_optimaze_game_rule_is_new_colony = yes
		}
	}
}

country_event = {#_|VOP优化|AI资源储存性能
	id = vop_ai_fixed.26
	hide_window = yes
	is_triggered_only = yes
	trigger = { 
		is_ai = yes
		check_variable_arithmetic = { which = modifier:country_resource_max_add value >= 100000 }
		OR = {
			resource_stockpile_compare = { resource = energy value > modifier:country_resource_max_add }
			resource_stockpile_compare = { resource = food value > modifier:country_resource_max_add }
			resource_stockpile_compare = { resource = minerals value > modifier:country_resource_max_add }
		}
	}
	immediate = { 
		VOP_ai_REROURCE_opt = { TYPE = energy MULT = 0.5 }
		VOP_ai_REROURCE_opt = { TYPE = food MULT = 0.5 }
		VOP_ai_REROURCE_opt = { TYPE = minerals MULT = 0.5 }
	}
}

country_event = {#_|VOP优化|添加trigger修改effect 只允许玩家
	id = vop_ai_fixed.27
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_ai = no
		has_ascension_perk = ap_eternal_vigilance
	}
	immediate = {
		if = {
			limit = {
				has_policy_flag = eternal_vigilance_full_spending
			}
			every_owned_starbase = {
				limit = {
					fleet = { is_in_combat = no }
					used_defense_platform_capacity_percent < 0.5
				}
				while = { count = 2 spawn_free_defense_platform = yes }
			}
			every_owned_nonprimary_starbase = {
				limit = {
					fleet = { is_in_combat = no }
					used_defense_platform_capacity_percent < 0.5
				}
				while = { count = 2 spawn_free_defense_platform = yes }
			}
		}
		else_if = {
			limit = {
				has_policy_flag = eternal_vigilance_half_spending
			}
			every_owned_starbase = {
				limit = {
					is_starbase_type = sfortress
					fleet = { is_in_combat = no }
					used_defense_platform_capacity_percent < 0.5
				}
				while = { count = 2 spawn_free_defense_platform = yes }
			}
			every_owned_nonprimary_starbase = {
				limit = {
					fleet = { is_in_combat = no }
					OR = {
						is_starbase_type = sorbital_fortress
						is_starbase_type = sdeepspacecitadel
					}
					used_defense_platform_capacity_percent < 0.5
				}
				while = { count = 2 spawn_free_defense_platform = yes }
			}
		}
	}
}

country_event = {#_|VOP优化|禁用自循环 180 to 360 年检查
	id = vop_ai_fixed.28
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_crisis_level = crisis_behemoth_level_5
		exists = capital_scope
		capital_scope = {
			pop_amount > 500
			OR = {
				num_assigned_jobs = { job = transference_volunteer value > 0 }
				num_assigned_jobs = { job = transference_drone value > 0 }
			}
		}
	}
	immediate = {
		capital_scope = {
			owner = {
				if = {
					limit = {
						is_gestalt = no
					}
					export_trigger_value_to_variable = {
						#Kill 10% rounded up
						trigger = num_assigned_jobs
						parameters = {
							job = transference_volunteer
						}
						variable = num_transference_jobs_var
					}
					divide_variable = {
						which = num_transference_jobs_var
						value = 5
					}
					ceiling_variable = num_transference_jobs_var
				}
				if = {
					limit = {
						is_gestalt = yes
					}
					export_trigger_value_to_variable = {
						#Kill 20% rounded up
						trigger = num_assigned_jobs
						parameters = {
							job = transference_drone
						}
						variable = num_transference_jobs_var
					}
					divide_variable = {
						which = num_transference_jobs_var
						value = 5
					}
					ceiling_variable = num_transference_jobs_var
				}
			}
			while = {
				count = owner.num_transference_jobs_var
				random_owned_pop_job = {
					limit = {
						has_job_type = transference_volunteer
					}
					kill_assigned_pop_amount = { amount = 1 }
				}
				random_owned_pop_job = {
					limit = {
						has_job_type = transference_drone
					}
					kill_assigned_pop_amount = { amount = 1 }
				}
			}
			owner = {
				create_message = {
					type = MESSAGE_POPS_TRANSFERRED
					localization = MESSAGE_POPS_TRANSFERRED_DESC
					days = @toast_message_days
					target = root
					variable = {
						type = variable
						varname = num_transference_jobs_var
						localization = VALUE
						scope = root
					}
				}
			}
		}
		change_variable = {
			which = pops_transferred
			value = num_transference_jobs_var
		}
	}
	after = {
		set_variable = {
			which = num_transference_jobs_var
			value = 0
		}
	}
}