# Matter Decompressor Site
matter_decompressor_0 = {
	entity = "construction_platform_entity"
	construction_entity = "construction_platform_entity"
	portrait = "GFX_megastructure_construction_background"
	place_entity_on_planet_plane = no
	entity_offset = { x = -20 y = -20 }
	rotate_to_center = no
	scale_offset = yes
	build_time = 1800
	resources = {
		category = megastructures
		cost = {
			alloys = 5000
			unity = 5000
		}

		upkeep = {
			energy = 5
		}
	}

	prerequisites = { "tech_matter_decompressor" }

	potential = {
		has_gw_matter_decompressor = yes
	}

	possible = {
		exists = starbase
		custom_tooltip = {
			fail_text = "requires_inside_border"
			is_inside_border = from
		}
		custom_tooltip = {
			fail_text = "requires_surveyed_system"
			NOT = {
				any_system_planet = {
					is_surveyed = {
						who = prev.from
						status = no
					}
				}
			}
		}
		custom_tooltip = {
			fail_text = "requires_no_habitable_planets"
			NOT = { any_system_planet = { OR = { is_colonizable = yes is_colony = yes } } }
		}
		custom_tooltip = {
			fail_text = "requires_black_hole"
			is_star_class = sc_black_hole
		}
		custom_tooltip = {
			fail_text = "requires_no_existing_matter_decompressor"
			from = { OR = {
				has_relic = r_contingency_core
				NOT = { has_country_flag = built_matter_decompressor_site }
			} }
		}
		custom_tooltip = {
			fail_text = "requires_no_existing_matter_decompressor_two"
			from = { NOT = { has_country_flag = built_matter_decompressor_site_contingency } }
		}
		custom_tooltip = {
			fail_text = "requires_no_existing_megastructure"
			NOT = { has_any_megastructure = yes }
		}
	}

	placement_rules = {
		planet_possible = {
			custom_tooltip = {
				fail_text = "must_build_around_star"
				is_star = yes
			}
			custom_tooltip = {
				fail_text = "requires_no_anomaly"
				NOT = { has_anomaly = yes }
			}
			is_star_class = sc_black_hole
		}
	}

	# root = system
	# from = country
	ai_weight = { factor = 0 }

	on_build_start = {}
	on_build_cancel = {}
	on_build_complete = {
		from = {
			if = {
				limit = {
					has_relic = r_contingency_core
					has_country_flag = built_matter_decompressor_site
				}
				set_country_flag = built_matter_decompressor_site_contingency
			}
			set_country_flag = built_matter_decompressor_site
		}
		fromfrom.planet = {
			if = {
				limit = { has_orbital_station = yes }
				orbital_station = {
					dismantle = yes
				}
			}
		}
	}
}