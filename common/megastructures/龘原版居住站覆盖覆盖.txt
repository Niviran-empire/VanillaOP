# see README.txt for example

@central_orbital_build_time = 1800
@central_orbital_alloy_cost = 1500
@central_orbital_influence_cost = 200

# Habitat Central Complex
habitat_central_complex = {
	entity = "habitat_phase_03_entity"
	construction_entity = "habitat_phase_03_entity"
	portrait = "GFX_megastructure_habitat_background"
	place_entity_on_planet_plane = no
	show_galactic_map_icon = no
	hide_name = yes
	show_in_outliner = no
	entity_offset = { x = 7 y = -7 }
	build_time = @central_orbital_build_time

	resources = {
		category = megastructures_habitat
		cost = {
			influence = @central_orbital_influence_cost
		}
		cost = {
			trigger = {
				country_uses_bio_ships = no
			}
			alloys = @central_orbital_alloy_cost
		}
		cost = {
			trigger = {
				country_uses_bio_ships = yes
			}
			alloys = @central_orbital_alloy_cost
			mult = 0.5
		}
		cost = {
			trigger = {
				country_uses_bio_ships = yes
			}
			food = @central_orbital_alloy_cost
			mult = @halved_alloy_to_food_cost_ratio
		}
	}

	construction_blocks_and_blocked_by = self_type
	custom_tooltip_requirements = "MEGASTRUCTURE_TOOLTIP_REQUIREMENTS_HABITAT_CENTRAL_COMPLEX"
	build_system_tooltip = habitat_tooltip

	potential = {
		OR = {
			has_technology = tech_habitat_1
			has_civic = civic_diadochi
			has_civic = civic_great_khans_legacy
			has_country_flag = democratic_khanate_flag
		}
	}

	possible = {
		hidden_trigger = {
			exists = starbase
		}
		custom_tooltip = {
			fail_text = "requires_inside_border"
			is_inside_border = from
		}
		custom_tooltip = {
			fail_text = "requires_not_habitat_central_complex"
			NOT = {
				OR = {
					any_system_planet = {
						OR = {
							has_planet_flag = habitat
							has_planet_flag = hold_the_line_habitat
						}
					}
					has_megastructure = habitat_central_complex_ruined
				}
			}
		}
		custom_tooltip = {
			fail_text = "requires_no_orbital_debris"
			NOT = {
				any_system_planet = {
					has_planet_flag = has_orbital_debris
				}
			}
		}

		# The AI has a hard cap on number of habitats scaling with galaxy size and difficulty
		hidden_trigger = {
			from = {
				if = {
					limit = {
						is_ai = yes
					}
					count_planet_within_border = {
						count <= value:ai_habitat_cap
						limit = {
							is_planet_class = pc_habitat
						}
					}
				}
			}
		}
	}

	placement_rules = {
		planet_possible = {
			custom_tooltip = {
				fail_text = "requires_surveyed_planet"
				is_surveyed = {			# prevent leaking habitability information
					who = prev.from
					status = yes
				}
			}
			custom_tooltip = {
				fail_text = "requires_no_anomaly"
				NOT = { has_anomaly = yes }
			}
			custom_tooltip = {
				fail_text = "requires_no_existing_megastructure"
				#can_build_megastructure_on_planet = yes
				NOR = {
					has_planet_flag = megastructure
					has_planet_flag = has_megastructure
					solar_system = {
						OR = {
							has_star_flag = ring_world_built
							has_star_flag = ithomes_gate
						}
					}
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_ringworld_habitable_damaged
					is_planet_class = pc_ringworld_tech
					is_planet_class = pc_ringworld_tech_damaged
					is_planet_class = pc_ringworld_seam
					is_planet_class = pc_ringworld_seam_damaged
					is_planet_class = pc_habitat
					is_planet_class = pc_cosmogenesis_world
				}
			}

			# balance for habitats
			custom_tooltip = {
				fail_text = "requires_not_minor_planetary_body"
				NOR = {
					is_asteroid = yes
					is_moon = yes
				}
			}
			custom_tooltip = {
				fail_text = "requires_not_astral_scar"
				is_astral_scar = no
			}
			custom_tooltip = {
				fail_text = "requires_not_solarpunk"
				NOT = {
					solar_system = {
						has_star_flag = solarpunk_system_02
					}
				}
			}
			if = {
				limit = {
					from = { is_ai = yes }
				}
				or = {
					has_deposit_for = shipclass_mining_station
					has_deposit_for = shipclass_research_station
				}
			}
		} # use these for all non-star megastructures
	}

	# root = system
	# from = country
	ai_weight = { factor = 0 }

	on_build_complete = {
		fromfrom.planet = {
			save_event_target_as = target_planet
		}
		if = {
			limit = {
				fromfrom.planet = {
					is_star = yes
				}
			}
			spawn_habitat_effect = {
				DISTANCE = 19.798
			}
		}
		else = {
			spawn_habitat_effect = {
				DISTANCE = 9.899
			}
		}

		fromfrom.solar_system = {
			set_star_flag = has_habitat
		}
		from = {
			save_event_target_as = habitat_owner
		}
		remove_megastructure = fromfrom
		from = { country_event = { id = megastructures.10 } }
	}
}