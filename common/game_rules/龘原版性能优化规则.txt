# #Check if it is possible to build orbital stations on this planet
# #this: planet
# #root: country
# can_planet_support_orbital_station = {
# 	custom_tooltip = {
# 		fail_text = "ORBITAL_STATION_ALREADY_EXISTS"
# 		has_any_megastructure = no
# 		NOT = { has_planet_flag = has_megastructure }
# 	}
# }

# This = pop
pop_group_generates_crime = {
	always = no
}

# this = system
# root = country
system_blocks_sensors = {
	has_star_flag = can_enable_can_be_system_blocks_sensors
}

# This = pop
can_vote_in_democratic_election = {
	has_pop_group_flag = can_enable_pop_election_vote
}

# Root = Pop
# From = Country
# This = Pop
# NOTE: species_has_happiness is also checked for this
pop_group_has_random_ethics = {
	has_pop_group_flag = can_enable_pop_has_random_ethics
}

#Root = country
#This = pop
can_generate_military_leader_from_pop_group = {
	has_pop_group_flag = can_enable_can_generate_military_leader_from_pop
}

#Checks whether any leaders (scientists etc) can be formed from this pop
#Root = country
#This = pop
can_generate_leader_from_pop_group = {
	has_pop_group_flag = can_enable_can_generate_leader_from_pop
}

# Root = country
# This = species
can_modify_species = {
	if = {
		limit = { root = { is_ai = yes } }
		root = { count_exact_species = { count < 3 limit = { OR = { is_same_species = root is_subspecies = root } } } }
	}
	else = {  
		# Can't modify root Species during Ascension Situations
		if = {
			limit = {
				is_same_species = ROOT
			}
			custom_tooltip = {
				fail_text = "ASCENSION_SITUATION_ONGOING"

				ROOT = {
					NOT = {
						any_situation = {
							has_ascension_situation_ongoing = yes
						}
					}
				}
			}
		}
		# Organic Species
		if = {
			limit = {
				OR = {
					is_archetype = BIOLOGICAL
					is_archetype = LITHOID
				}
				NOR = {
					has_trait = trait_clone_soldier_infertile
					has_trait = trait_clone_soldier_infertile_full_potential
				}
			}
			custom_tooltip = {
				fail_text = "NEEDS_GENE_TAILORING_OR_INTERGRATED_ANATOMY"
				ROOT = {
					OR = {
						has_technology = tech_gene_tailoring
						has_active_tradition = tr_cybernetics_integrated_anatomy
						has_active_tradition = tr_cybernetics_assimilator_integrated_anatomy
					}
				}
			}
		}
		# Clone Army
		if = {
			limit = {
				OR = {
					has_trait = trait_clone_soldier_infertile
					has_trait = trait_clone_soldier_infertile_full_potential
				}
			}
			custom_tooltip = {
				fail_text = "NEEDS_GENE_TAILORING_AND_CLONE_SYNTHESIZATION"
				ROOT = {
					has_technology = tech_gene_tailoring
					has_active_tradition = tr_cloning_somatic_synthesization_clone_army
				}
			}
		}
		# Robots & Machines
		else_if = {
			limit = {
				OR = {
					is_archetype = ROBOT
					is_archetype = MACHINE
				}
			}
			if = {
				limit = {
					ROOT = {
						OR = {
							AND = { ## organic trying to robomod
								is_individual_machine = no
								is_machine_empire = no
							}
							AND = { ## Machines with origins that delay them
								OR = {
									is_individual_machine = yes
									is_machine_empire = yes
								}
								OR  = {
									has_origin = origin_life_seeded
									has_origin = origin_ocean_machines
									has_origin = origin_void_machines
									has_origin = origin_shattered_ring
								}
							}
						}
					}
				}
				custom_tooltip = {
					fail_text = "NEEDS_ROBOT_MODDING"

					ROOT = {
						OR = {
							has_technology = tech_robomodding
							has_technology = tech_robomodding_m
						}
					}
				}
			}
		}
		# Self-Modified
		custom_tooltip = {
			fail_text = "CANNOT_MODIFY_SELF_MODIFIED_SPECIES"
			AND = {
				NOT = {
					has_trait = trait_self_modified
				}
				#is_same_species = root
			}
		}
		# Malleable Genes
		custom_tooltip = {
			fail_text = "CANNOT_MODIFY_MALLEABLE_GENES_SPECIES"
			NOT = {
				has_trait = trait_malleable_genes
			}
		}
	}
}

# Root/this = country
# From = planet
# Checks if the country is allowed to build a mining station around this planet/star
can_build_mining_station_around = {
	exists = root
	ROOT = { is_ai = no }
}

# Root/this = country
# From = planet
# Checks if the country is allowed to build a research station around this planet/star
can_build_research_station_around = {
	exists = root
	ROOT = { is_ai = no }
}

# This = Planet
is_new_colony = {
	has_planet_flag = can_enable_is_new_colony
}