ships = {
	use_for_ai_budget = yes
	generate_mult_modifiers = {
		produces upkeep cost
	}
	generate_add_modifiers = {
		produces upkeep cost
	}
	ai_use_parent_for_resources_upkeep = {
		energy
	}
	parent = country

	modifier_category = ship
	#niviran
	triggered_cost_modifier = {
		key = ship_constructor
		use_parent_icon = yes
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_valid = yes			#When called from ship designer the design is not valid yet.
			is_ship_class = shipclass_constructor
		}
	}
	triggered_cost_modifier = {
		key = ship_titan
		use_parent_icon = yes
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_valid = yes			#When called from ship designer the design is not valid yet.
			is_ship_size = titan
		}
	}
	triggered_cost_modifier = {
		key = ship_colossus
		use_parent_icon = yes
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_valid = yes			#When called from ship designer the design is not valid yet.
			is_ship_class = shipclass_military_special
		}
	}
	triggered_cost_modifier = {
		key = ship_juggernaut
		use_parent_icon = yes
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_valid = yes			#When called from ship designer the design is not valid yet.
			is_ship_size = juggernaut
		}
	}
	triggered_cost_modifier = {
		key = ship_research_station
		use_parent_icon = yes
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_valid = yes			#When called from ship designer the design is not valid yet.
			is_ship_size = research_station
		}
	}
	triggered_produces_modifier = {
		key = ship_mining_station
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_valid = yes			#When called from ship designer the design is not valid yet.
			is_ship_size = mining_station
		}
	}
	#Vanllia
	triggered_produces_modifier = {
		key = ship_transport
		use_parent_icon = yes
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_valid = yes			#When called from ship designer the design is not valid yet.
			is_ship_size = transport
		}
	}
	triggered_cost_modifier = {
		key = starbase_shipyard_build
		use_parent_icon = yes

		modifier_types = {
			mult add
		}
	}
	#gdf
	triggered_cost_modifier = {
		key = gdf_ship
		use_parent_icon = yes
		modifier_types = {
			mult add
		}

		trigger = {
			is_scope_valid = yes #When called from ship designer the design is not valid yet.
			has_ship_owner_type = galactic_community
		}
	}
	#corvette
	triggered_cost_modifier = {
		key = ship_corvette
		use_parent_icon = yes
		modifier_types = {
			mult add
		}

		trigger = {
			is_scope_valid = yes
			OR = {
				is_ship_size = corvette
				is_ship_size = offspring_corvette
			}
		}
	}
	# triggered_upkeep_modifier = {
	# 	key = ship_corvette
	# 	use_parent_icon = yes
	# 	modifier_types = {
	# 		mult
	# 		add
	# 	}
	# 	trigger = {
	# 		is_scope_valid = yes
	# 		OR = {
	# 			is_ship_size = corvette
	# 			is_ship_size = offspring_corvette
	# 		}
	# 	}
	# }
	#destroyer
	triggered_cost_modifier = {
		key = ship_destroyer
		use_parent_icon = yes
		modifier_types = {
			mult add
		}

		trigger = {
			is_scope_valid = yes
			OR = {
				is_ship_size = destroyer
				is_ship_size = offspring_destroyer
			}
		}
	}
	# triggered_upkeep_modifier = {
	# 	key = ship_destroyer
	# 	use_parent_icon = yes
	# 	modifier_types = {
	# 		mult add
	# 	}
	# 	trigger = {
	# 		is_scope_valid = yes
	# 		OR = {
	# 			is_ship_size = destroyer
	# 			is_ship_size = offspring_destroyer
	# 		}
	# 	}
	# }
	#cruser
	triggered_cost_modifier = {
		key = ship_cruiser
		use_parent_icon = yes
		modifier_types = {
			mult add
		}
	
		trigger = {
			is_scope_valid = yes
			OR = {
				is_ship_size = cruiser
				is_ship_size = offspring_cruiser
			}
		}
	}
	# triggered_upkeep_modifier = {
	# 	key = ship_cruiser
	# 	use_parent_icon = yes
	# 	modifier_types = {
	# 		mult add
	# 	}
		
	# 	trigger = {
	# 		is_scope_valid = yes
	# 		OR = {
	# 			is_ship_size = cruiser
	# 			is_ship_size = offspring_cruiser
	# 		}
	# 	}
	# }
	#battleship
	triggered_cost_modifier = {
		key = ship_battleship
		use_parent_icon = yes
		modifier_types = {
			mult
			add
		}
		trigger = {
			is_scope_valid = yes
			OR = {
				is_ship_size = battleship
				is_ship_size = offspring_battleship
			}
		}
	}
	# triggered_upkeep_modifier = {
	# 	key = ship_battleship
	# 	use_parent_icon = yes
	# 	modifier_types = {
	# 		mult
	# 		add
	# 	}
	# 	trigger = {
	# 		is_scope_valid = yes
	# 		OR = {
	# 			is_ship_size = battleship
	# 			is_ship_size = offspring_battleship
	# 		}
	# 	}
	# }
	#science
	triggered_cost_modifier = {
		key = ship_science
		use_parent_icon = yes
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_valid = yes			#When called from ship designer the design is not valid yet.
			is_ship_class = shipclass_science_ship
		}
	}
	#ship_military
	triggered_cost_modifier = {
		key = ship_military
		use_parent_icon = yes
		modifier_types = {
			mult add
		}

		trigger = {
			is_scope_valid = yes
			OR = {
				is_ship_class = shipclass_military
				is_ship_class = shipclass_military_special
			}
		}
	}
	# triggered_upkeep_modifier = {
	# 	key = ship_military
	# 	use_parent_icon = yes
	# 	modifier_types = {
	# 		mult add
	# 	}

	# 	trigger = {
	# 		is_scope_valid = yes
	# 		OR = {
	# 			is_ship_class = shipclass_military
	# 			is_ship_class = shipclass_military_special
	# 		}
	# 	}
	# }
	triggered_cost_modifier = {
		key = ship_military_station_small
		use_parent_icon = yes
		modifier_types = {
			mult add
		}

		trigger = {
			is_scope_valid = yes
			is_ship_size = military_station_small
		}
	}

	# triggered_upkeep_modifier = {
	# 	key = shipsize_military_station_small
	# 	use_parent_icon = yes
	# 	modifier_types = {
	# 		mult add
	# 	}

	# 	trigger = {
	# 		is_scope_valid = yes
	# 		is_ship_size = military_station_small
	# 	}
	# }
}

planet_jobs = {
	parent = planets
	generate_add_modifiers = {
		produces upkeep
	}
	generate_mult_modifiers = {
		produces upkeep
	}
	modifier_category = pop
	##	PR转化	##############################
	triggered_cost_modifier = {
		key = PR_ec_non_pop
		modifier_types = {
			mult
		}
		trigger = {
			NOT = { is_scope_type = pop }
		}
	}
	triggered_produces_modifier = {
		key = PR_ec_non_pop
		modifier_types = {
			mult
		}
		trigger = {
			NOT = { is_scope_type = pop }
		}
	}
	##	vanilla	##############################
	triggered_produces_modifier = {
		key = planet_jobs_slave
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_type = pop
			is_pop_category = slave
			has_job_category = worker
		}
	}
	# triggered_upkeep_modifier = {
	# 	key = planet_jobs_slave
	# 	modifier_types = {
	# 		mult add
	# 	}
	# 	trigger = {
	# 		is_scope_type = pop	#_|FW|
	# 		is_pop_category = slave
	# 		has_job_category = worker
	# 	}
	# }

	triggered_produces_modifier = {
		key = planet_worker_ownership_jobs
		modifier_types = {
			mult add
		}
		trigger = {
			exists = owner
			is_scope_type = pop	#_|FW|
			has_living_standard = {
				country = owner
				type = living_standard_worker_ownership
			}
		}
	}

	triggered_produces_modifier = {
		key = planet_cyborg_jobs
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_type = pop	#_|FW|
			has_trait = trait_cybernetic
		}
	}

	triggered_produces_modifier = {
		key = habitat_jobs
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_type = pop	#_|FW|
			exists = planet
			planet = { is_planet_class = pc_habitat }
		}
	}

	triggered_produces_modifier = {
		key = non_artificial_planet_jobs
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_type = pop	#_|FW|
			exists = planet
			planet = { is_artificial = no }
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_worker
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_type = pop	#_|FW|
			OR = {
				is_pop_category = worker
				AND = {
					is_pop_category = slave # Yes, slave should count towards both worker and slave
					has_job_category = worker
				}
				is_pop_category = simple_drone
			}
		}
	}

	triggered_produces_modifier = { #use this one if deliberately excluding worker drones
		key = planet_jobs_worker_only
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_type = pop	#_|FW|
			OR = {
				is_pop_category = worker
				AND = {
					is_pop_category = slave # Yes, slave should count towards both worker and slave
					has_job_category = worker
				}
			}
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_specialist
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_type = pop	#_|FW|
			OR = {
				is_pop_category = specialist
				is_pop_category = complex_drone #planet_jobs_complex_drone is preferable for stuff visible during galaxy setup
				AND = {
					is_pop_category = slave
					has_job_category = specialist
				}
			}
		}
	}

	triggered_produces_modifier = { #use this one if deliberately excluding complex drones
		key = planet_jobs_specialist_only
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_type = pop	#_|FW|
			OR = {
				is_pop_category = specialist
				AND = {
					is_pop_category = slave
					has_job_category = specialist
				}
			}
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_ruler
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_type = pop	#_|FW|
			is_pop_category = ruler
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_simple_drone
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_type = pop	#_|FW|
			is_pop_category = simple_drone
		}
	}	

	triggered_produces_modifier = {
		key = planet_jobs_complex_drone
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_type = pop	#_|FW|
			is_pop_category = complex_drone
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_complex_and_simple_drone
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_type = pop	#_|FW|
			OR = {
				is_pop_category = complex_drone
				is_pop_category = simple_drone
			}
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_robotic
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_type = pop	#_|FW|
			is_robot_pop = yes
		}
	}

	triggered_produces_modifier = {
		key = planet_jobs_organics
		modifier_types = {
			mult add
		}
		trigger = {
			is_scope_type = pop	#_|FW|
			is_robot_pop = no
		}
	}

	# # mage ##################################
	# triggered_produces_modifier = {
	# 	key = planet_jobs_psionic
	# 	modifier_types = { 
	# 		mult add
	# 	}
	# 	trigger = {
	# 		str_is_mage = yes
	# 	}
	# }

	# triggered_produces_modifier = {
	# 	key = planet_jobs_non_psionic
	# 	modifier_types = { 
	# 		mult add
	# 	}
	# 	trigger = {
	# 		str_is_mage = no
	# 	}
	# }
}